-- RadiantHub UI Library
-- Mobile-Compatible Roblox UI Library with Modern Design

local RadiantHub = {}
RadiantHub.__index = RadiantHub

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local player = Players.LocalPlayer

-- Library Constructor
function RadiantHub:CreateWindow(config)
    local self = setmetatable({}, RadiantHub)
    
    -- Ensure config exists
    config = config or {}
    
    -- Configuration with proper type checking
    self.config = {
        Name = tostring(config.Name or "RadiantHub"),
        Size = config.Size or UDim2.new(0, 700, 0, 450),
        Position = config.Position or UDim2.new(0.5, -350, 0.5, -225),
        Theme = tostring(config.Theme or "Dark")
    }
    
    -- Internal state
    self.settings = {}
    self.tabs = {}
    self.currentTab = nil
    self.isMinimized = false
    self.notificationQueue = {}
    
    -- Create main UI
    self:_createMainUI()
    self:_createWatermark()
    self:_createNotificationSystem()
    self:_createColorPicker()
    self:_setupAnimations()
    self:_setupControls()
    
    return self
end

-- Main UI Creation
function RadiantHub:_createMainUI()
    -- Create ScreenGui
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "RadiantHub_" .. self.config.Name
    self.screenGui.ResetOnSpawn = false
    self.screenGui.Parent = CoreGui
    
    -- Main Frame
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Name = "MainFrame"
    self.mainFrame.Size = self.config.Size
    self.mainFrame.Position = self.config.Position
    self.mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Parent = self.screenGui
    
    -- Main gradient
    local mainGradient = Instance.new("UIGradient")
    mainGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 80)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 40))
    }
    mainGradient.Rotation = 135
    mainGradient.Parent = self.mainFrame
    
    -- Rainbow border
    self.borderFrame = Instance.new("Frame")
    self.borderFrame.Name = "BorderFrame"
    self.borderFrame.Size = UDim2.new(1, 8, 1, 8)
    self.borderFrame.Position = UDim2.new(0, -4, 0, -4)
    self.borderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.borderFrame.BorderSizePixel = 0
    self.borderFrame.ZIndex = 0
    self.borderFrame.Parent = self.mainFrame
    
    self.borderGradient = Instance.new("UIGradient")
    self.borderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 150)),
        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(255, 100, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 150))
    }
    self.borderGradient.Rotation = 45
    self.borderGradient.Parent = self.borderFrame
    
    -- Title Bar
    self.titleBar = Instance.new("Frame")
    self.titleBar.Name = "TitleBar"
    self.titleBar.Size = UDim2.new(1, 0, 0, 40)
    self.titleBar.Position = UDim2.new(0, 0, 0, 0)
    self.titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    self.titleBar.BorderSizePixel = 1
    self.titleBar.BorderColor3 = Color3.fromRGB(70, 70, 70)
    self.titleBar.Parent = self.mainFrame
    
    -- Title
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Name = "TitleLabel"
    self.titleLabel.Size = UDim2.new(1, -100, 1, 0)
    self.titleLabel.Position = UDim2.new(0, 20, 0, 0)
    self.titleLabel.BackgroundTransparency = 1
    self.titleLabel.Text = self.config.Name:upper()
    self.titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.titleLabel.TextSize = 18
    self.titleLabel.TextStrokeTransparency = 0
    self.titleLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    self.titleLabel.Font = Enum.Font.GothamBold
    self.titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.titleLabel.Parent = self.titleBar
    
    -- Control buttons
    self:_createControlButtons()
    
    -- Left Sidebar
    self.leftSidebar = Instance.new("Frame")
    self.leftSidebar.Name = "LeftSidebar"
    self.leftSidebar.Size = UDim2.new(0, 150, 1, -50)
    self.leftSidebar.Position = UDim2.new(0, 5, 0, 45)
    self.leftSidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    self.leftSidebar.BorderSizePixel = 0
    self.leftSidebar.Parent = self.mainFrame
    
    local sidebarCorner = Instance.new("UICorner")
    sidebarCorner.CornerRadius = UDim.new(0, 6)
    sidebarCorner.Parent = self.leftSidebar
    
    -- Content Area
    self.contentArea = Instance.new("Frame")
    self.contentArea.Name = "ContentArea"
    self.contentArea.Size = UDim2.new(1, -170, 1, -50)
    self.contentArea.Position = UDim2.new(0, 165, 0, 45)
    self.contentArea.BackgroundTransparency = 1
    self.contentArea.BorderSizePixel = 0
    self.contentArea.Parent = self.mainFrame
    
    -- Left and Right sections
    self:_createContentSections()
    
    -- User profile
    self:_createUserProfile()
    
    -- Minimized icon
    self:_createMinimizedIcon()
end

function RadiantHub:_createControlButtons()
    -- Minimize button
    self.minimizeButton = Instance.new("TextButton")
    self.minimizeButton.Name = "MinimizeButton"
    self.minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    self.minimizeButton.Position = UDim2.new(1, -70, 0, 5)
    self.minimizeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    self.minimizeButton.BorderSizePixel = 0
    self.minimizeButton.Text = "−"
    self.minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.minimizeButton.TextSize = 18
    self.minimizeButton.Font = Enum.Font.GothamBold
    self.minimizeButton.Parent = self.titleBar
    
    -- Close button
    self.closeButton = Instance.new("TextButton")
    self.closeButton.Name = "CloseButton"
    self.closeButton.Size = UDim2.new(0, 30, 0, 30)
    self.closeButton.Position = UDim2.new(1, -35, 0, 5)
    self.closeButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    self.closeButton.BorderSizePixel = 0
    self.closeButton.Text = "×"
    self.closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.closeButton.TextSize = 18
    self.closeButton.Font = Enum.Font.GothamBold
    self.closeButton.Parent = self.titleBar
end

function RadiantHub:_createContentSections()
    -- Left Section
    self.leftSection = Instance.new("Frame")
    self.leftSection.Name = "LeftSection"
    self.leftSection.Size = UDim2.new(0.495, -5, 1, 0)
    self.leftSection.Position = UDim2.new(0, 0, 0, 0)
    self.leftSection.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    self.leftSection.BorderSizePixel = 1
    self.leftSection.BorderColor3 = Color3.fromRGB(70, 70, 70)
    self.leftSection.Parent = self.contentArea
    
    -- Right Section
    self.rightSection = Instance.new("Frame")
    self.rightSection.Name = "RightSection"
    self.rightSection.Size = UDim2.new(0.495, -5, 1, 0)
    self.rightSection.Position = UDim2.new(0.505, 0, 0, 0)
    self.rightSection.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    self.rightSection.BorderSizePixel = 1
    self.rightSection.BorderColor3 = Color3.fromRGB(70, 70, 70)
    self.rightSection.Parent = self.contentArea
    
    -- Headers
    self.leftHeader = Instance.new("TextLabel")
    self.leftHeader.Name = "LeftHeader"
    self.leftHeader.Size = UDim2.new(1, 0, 0, 30)
    self.leftHeader.Position = UDim2.new(0, 0, 0, 5)
    self.leftHeader.BackgroundTransparency = 1
    self.leftHeader.Text = "FEATURES"
    self.leftHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.leftHeader.TextSize = 14
    self.leftHeader.Font = Enum.Font.GothamBold
    self.leftHeader.TextXAlignment = Enum.TextXAlignment.Center
    self.leftHeader.Parent = self.leftSection
    
    self.rightHeader = Instance.new("TextLabel")
    self.rightHeader.Name = "RightHeader"
    self.rightHeader.Size = UDim2.new(1, 0, 0, 30)
    self.rightHeader.Position = UDim2.new(0, 0, 0, 5)
    self.rightHeader.BackgroundTransparency = 1
    self.rightHeader.Text = "SETTINGS"
    self.rightHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.rightHeader.TextSize = 14
    self.rightHeader.Font = Enum.Font.GothamBold
    self.rightHeader.TextXAlignment = Enum.TextXAlignment.Center
    self.rightHeader.Parent = self.rightSection
    
    -- Content containers
    self.leftContent = Instance.new("Frame")
    self.leftContent.Name = "LeftContent"
    self.leftContent.Size = UDim2.new(1, -10, 1, -45)
    self.leftContent.Position = UDim2.new(0, 5, 0, 40)
    self.leftContent.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.leftContent.BorderSizePixel = 1
    self.leftContent.BorderColor3 = Color3.fromRGB(80, 80, 80)
    self.leftContent.Parent = self.leftSection
    
    self.rightContent = Instance.new("Frame")
    self.rightContent.Name = "RightContent"
    self.rightContent.Size = UDim2.new(1, -10, 1, -45)
    self.rightContent.Position = UDim2.new(0, 5, 0, 40)
    self.rightContent.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.rightContent.BorderSizePixel = 1
    self.rightContent.BorderColor3 = Color3.fromRGB(80, 80, 80)
    self.rightContent.Parent = self.rightSection
end

function RadiantHub:_createUserProfile()
    local userProfileFrame = Instance.new("Frame")
    userProfileFrame.Name = "UserProfileFrame"
    userProfileFrame.Size = UDim2.new(1, -16, 0, 50)
    userProfileFrame.Position = UDim2.new(0, 8, 1, -58)
    userProfileFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    userProfileFrame.BorderSizePixel = 0
    userProfileFrame.Parent = self.leftSidebar
    
    local profileCorner = Instance.new("UICorner")
    profileCorner.CornerRadius = UDim.new(0, 6)
    profileCorner.Parent = userProfileFrame
    
    local userAvatar = Instance.new("ImageLabel")
    userAvatar.Name = "UserAvatar"
    userAvatar.Size = UDim2.new(0, 35, 0, 35)
    userAvatar.Position = UDim2.new(0, 8, 0.5, -17.5)
    userAvatar.BackgroundColor3 = Color3.fromRGB(255, 150, 100)
    userAvatar.BorderSizePixel = 0
    userAvatar.Image = "rbxthumb://type=AvatarHeadShot&id=" .. player.UserId .. "&w=150&h=150"
    userAvatar.Parent = userProfileFrame
    
    local avatarCorner = Instance.new("UICorner")
    avatarCorner.CornerRadius = UDim.new(0.5, 0)
    avatarCorner.Parent = userAvatar
    
    local usernameLabel = Instance.new("TextLabel")
    usernameLabel.Size = UDim2.new(1, -50, 0, 16)
    usernameLabel.Position = UDim2.new(0, 45, 0, 8)
    usernameLabel.BackgroundTransparency = 1
    usernameLabel.Text = player.Name
    usernameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    usernameLabel.TextSize = 12
    usernameLabel.Font = Enum.Font.GothamSemibold
    usernameLabel.TextXAlignment = Enum.TextXAlignment.Left
    usernameLabel.TextYAlignment = Enum.TextYAlignment.Center
    usernameLabel.TextTruncate = Enum.TextTruncate.AtEnd
    usernameLabel.Parent = userProfileFrame
end

function RadiantHub:_createMinimizedIcon()
    self.minimizedIcon = Instance.new("ImageButton")
    self.minimizedIcon.Name = "MinimizedIcon"
    self.minimizedIcon.Size = UDim2.new(0, 50, 0, 50)
    self.minimizedIcon.Position = UDim2.new(0, 50, 0, 50)
    self.minimizedIcon.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.minimizedIcon.BackgroundTransparency = 0.1
    self.minimizedIcon.BorderSizePixel = 2
    self.minimizedIcon.BorderColor3 = Color3.fromRGB(0, 150, 255)
    self.minimizedIcon.Image = "rbxassetid://139404696073599"
    self.minimizedIcon.ImageColor3 = Color3.fromRGB(255, 255, 255)
    self.minimizedIcon.ImageTransparency = 0.1
    self.minimizedIcon.Visible = false
    self.minimizedIcon.Parent = self.screenGui

    -- Minimized icon drag support
    local minimizedDragging = false
    local minimizedDragStart = nil
    local minimizedStartPos = nil
    self.minimizedIcon.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            minimizedDragging = true
            minimizedDragStart = input.Position
            minimizedStartPos = self.minimizedIcon.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if minimizedDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - minimizedDragStart
            self.minimizedIcon.Position = UDim2.new(minimizedStartPos.X.Scale, minimizedStartPos.X.Offset + delta.X, minimizedStartPos.Y.Scale, minimizedStartPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            minimizedDragging = false
        end
    end)
end

function RadiantHub:_createWatermark()
    self.watermarkGui = Instance.new("ScreenGui")
    self.watermarkGui.Name = "RadiantHub_Watermark"
    self.watermarkGui.ResetOnSpawn = false
    self.watermarkGui.Parent = CoreGui
    
    local watermarkFrame = Instance.new("Frame")
    watermarkFrame.Name = "WatermarkFrame"
    watermarkFrame.Size = UDim2.new(0, 250, 0, 25)
    watermarkFrame.Position = UDim2.new(1, -260, 0, 10)
    watermarkFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    watermarkFrame.BorderSizePixel = 0
    watermarkFrame.Parent = self.watermarkGui
    
    local watermarkCorner = Instance.new("UICorner")
    watermarkCorner.CornerRadius = UDim.new(0, 3)
    watermarkCorner.Parent = watermarkFrame
    
    -- Accent line
    local accentLine = Instance.new("Frame")
    accentLine.Name = "AccentLine"
    accentLine.Size = UDim2.new(0, 3, 1, 0)
    accentLine.Position = UDim2.new(0, 0, 0, 0)
    accentLine.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    accentLine.BorderSizePixel = 0
    accentLine.Parent = watermarkFrame
    
    local accentCorner = Instance.new("UICorner")
    accentCorner.CornerRadius = UDim.new(0, 3)
    accentCorner.Parent = accentLine
    
    -- Content frame
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -8, 1, 0)
    contentFrame.Position = UDim2.new(0, 8, 0, 0)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = watermarkFrame
    
    -- RadiantHub label
    self.radiantLabel = Instance.new("TextLabel")
    self.radiantLabel.Size = UDim2.new(0, 80, 1, 0)
    self.radiantLabel.Position = UDim2.new(0, 0, 0, 0)
    self.radiantLabel.BackgroundTransparency = 1
    self.radiantLabel.Text = self.config.Name
    self.radiantLabel.TextColor3 = Color3.fromRGB(255, 0, 128)
    self.radiantLabel.TextSize = 12
    self.radiantLabel.Font = Enum.Font.GothamBold
    self.radiantLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.radiantLabel.TextYAlignment = Enum.TextYAlignment.Center
    self.radiantLabel.Parent = contentFrame
    
    -- FPS Counter
    self.fpsLabel = Instance.new("TextLabel")
    self.fpsLabel.Size = UDim2.new(0, 50, 1, 0)
    self.fpsLabel.Position = UDim2.new(0, 90, 0, 0)
    self.fpsLabel.BackgroundTransparency = 1
    self.fpsLabel.Text = "60 FPS"
    self.fpsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    self.fpsLabel.TextSize = 11
    self.fpsLabel.Font = Enum.Font.Gotham
    self.fpsLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.fpsLabel.TextYAlignment = Enum.TextYAlignment.Center
    self.fpsLabel.Parent = contentFrame
    
    -- User info
    local userLabel = Instance.new("TextLabel")
    userLabel.Size = UDim2.new(1, -150, 1, 0)
    userLabel.Position = UDim2.new(0, 150, 0, 0)
    userLabel.BackgroundTransparency = 1
    userLabel.Text = player.Name
    userLabel.TextColor3 = Color3.fromRGB(160, 160, 160)
    userLabel.TextSize = 11
    userLabel.Font = Enum.Font.Gotham
    userLabel.TextXAlignment = Enum.TextXAlignment.Left
    userLabel.TextYAlignment = Enum.TextYAlignment.Center
    userLabel.TextTruncate = Enum.TextTruncate.AtEnd
    userLabel.Parent = contentFrame
end

function RadiantHub:_createNotificationSystem()
    self.notificationContainer = Instance.new("Frame")
    self.notificationContainer.Name = "NotificationContainer"
    self.notificationContainer.Size = UDim2.new(0, 300, 0, 200)
    self.notificationContainer.Position = UDim2.new(1, -310, 1, -210)
    self.notificationContainer.BackgroundTransparency = 1
    self.notificationContainer.Parent = self.watermarkGui
end

function RadiantHub:_createColorPicker(tab, config)
    config = config or {}
    -- Robust tab validation
    if not tab or type(tab) ~= "table" or not tab.leftElements or not tab.rightElements then
        warn("RadiantHub: Invalid tab object passed to _createColorPicker! Tab: " .. tostring(tab))
        return
    end
    -- Mobile-compatible color picker implementation
    local container = Instance.new("Frame")
    container.Name = (config.Name or "ColorPicker") .. "Container"
    container.Size = UDim2.new(1, -10, 0, 30)
    container.BackgroundTransparency = 1

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -40, 1, 0)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "ColorPicker"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = container

    local colorButton = Instance.new("TextButton")
    colorButton.Size = UDim2.new(0, 25, 0, 22)
    colorButton.Position = UDim2.new(1, -30, 0.5, -11)
    colorButton.BackgroundColor3 = config.Default or Color3.fromRGB(255, 100, 100)
    colorButton.BorderSizePixel = 1
    colorButton.BorderColor3 = Color3.fromRGB(150, 150, 150)
    colorButton.Text = ""
    colorButton.ZIndex = 2
    colorButton.Parent = container

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = colorButton

    -- Color picker overlay (one per library instance)
    if not self._colorPickerGui then
        local playerGui = game:GetService("CoreGui")
        local colorPickerGui = Instance.new("ScreenGui")
        colorPickerGui.Name = "RadiantHubColorPickerGui"
        colorPickerGui.ResetOnSpawn = false
        colorPickerGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        colorPickerGui.Parent = playerGui
        self._colorPickerGui = colorPickerGui
    end
    local colorPickerGui = self._colorPickerGui

    -- Overlay
    local colorPickerOverlay = Instance.new("Frame")
    colorPickerOverlay.Name = "ColorPickerOverlay"
    colorPickerOverlay.Size = UDim2.new(1, 0, 1, 0)
    colorPickerOverlay.Position = UDim2.new(0, 0, 0, 0)
    colorPickerOverlay.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    colorPickerOverlay.BackgroundTransparency = 0.3
    colorPickerOverlay.BorderSizePixel = 0
    colorPickerOverlay.Visible = false
    colorPickerOverlay.ZIndex = 200
    colorPickerOverlay.Parent = colorPickerGui

    -- Main color picker frame
    local colorPickerFrame = Instance.new("Frame")
    colorPickerFrame.Name = "ColorPickerFrame"
    colorPickerFrame.Size = UDim2.new(0, 350, 0, 420)
    colorPickerFrame.Position = UDim2.new(0.5, -175, 0.5, -210)
    colorPickerFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    colorPickerFrame.BorderSizePixel = 2
    colorPickerFrame.BorderColor3 = Color3.fromRGB(70, 70, 70)
    colorPickerFrame.ZIndex = 201
    colorPickerFrame.Parent = colorPickerOverlay

    local pickerCorner = Instance.new("UICorner")
    pickerCorner.CornerRadius = UDim.new(0, 8)
    pickerCorner.Parent = colorPickerFrame

    -- Title bar for color picker
    local pickerTitleBar = Instance.new("Frame")
    pickerTitleBar.Name = "PickerTitleBar"
    pickerTitleBar.Size = UDim2.new(1, 0, 0, 40)
    pickerTitleBar.Position = UDim2.new(0, 0, 0, 0)
    pickerTitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    pickerTitleBar.BorderSizePixel = 0
    pickerTitleBar.ZIndex = 202
    pickerTitleBar.Parent = colorPickerFrame

    local pickerTitle = Instance.new("TextLabel")
    pickerTitle.Size = UDim2.new(1, -40, 1, 0)
    pickerTitle.Position = UDim2.new(0, 10, 0, 0)
    pickerTitle.BackgroundTransparency = 1
    pickerTitle.Text = "Color Picker"
    pickerTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    pickerTitle.TextSize = 16
    pickerTitle.Font = Enum.Font.GothamBold
    pickerTitle.TextXAlignment = Enum.TextXAlignment.Left
    pickerTitle.TextYAlignment = Enum.TextYAlignment.Center
    pickerTitle.ZIndex = 203
    pickerTitle.Parent = pickerTitleBar

    local pickerCloseButton = Instance.new("TextButton")
    pickerCloseButton.Name = "CloseButton"
    pickerCloseButton.Size = UDim2.new(0, 30, 0, 30)
    pickerCloseButton.Position = UDim2.new(1, -35, 0, 5)
    pickerCloseButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    pickerCloseButton.BorderSizePixel = 0
    pickerCloseButton.Text = "×"
    pickerCloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    pickerCloseButton.TextSize = 18
    pickerCloseButton.Font = Enum.Font.GothamBold
    pickerCloseButton.ZIndex = 203
    pickerCloseButton.Parent = pickerTitleBar

    -- Hue/Saturation picker (main color area)
    local hueSatFrame = Instance.new("TextButton")
    hueSatFrame.Name = "HueSatFrame"
    hueSatFrame.Size = UDim2.new(1, -20, 0, 220)
    hueSatFrame.Position = UDim2.new(0, 10, 0, 50)
    hueSatFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- will be updated dynamically
    hueSatFrame.BorderSizePixel = 1
    hueSatFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    hueSatFrame.Text = ""
    hueSatFrame.ZIndex = 202
    hueSatFrame.Parent = colorPickerFrame

    -- 1. Saturation (white to transparent, left to right)
    local saturationOverlay = Instance.new("Frame")
    saturationOverlay.Size = UDim2.new(1, 0, 1, 0)
    saturationOverlay.Position = UDim2.new(0, 0, 0, 0)
    saturationOverlay.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    saturationOverlay.BorderSizePixel = 0
    saturationOverlay.ZIndex = 203
    saturationOverlay.Parent = hueSatFrame
    local satGradient = Instance.new("UIGradient")
    satGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
        ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
    })
    satGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1)
    })
    satGradient.Rotation = 0 -- left to right
    satGradient.Parent = saturationOverlay
    -- 2. Brightness (transparent to black, top to bottom)
    local brightnessOverlay = Instance.new("Frame")
    brightnessOverlay.Size = UDim2.new(1, 0, 1, 0)
    brightnessOverlay.Position = UDim2.new(0, 0, 0, 0)
    brightnessOverlay.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    brightnessOverlay.BorderSizePixel = 0
    brightnessOverlay.ZIndex = 204
    brightnessOverlay.Parent = hueSatFrame
    local brightGradient = Instance.new("UIGradient")
    brightGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.new(0, 0, 0))
    })
    brightGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1)
    })
    brightGradient.Rotation = 90 -- top to bottom
    brightGradient.Parent = brightnessOverlay

    -- Color selector circle
    local colorSelector = Instance.new("Frame")
    colorSelector.Name = "ColorSelector"
    colorSelector.Size = UDim2.new(0, 14, 0, 14)
    colorSelector.Position = UDim2.new(1, -7, 0, -7)
    colorSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    colorSelector.BorderSizePixel = 2
    colorSelector.BorderColor3 = Color3.fromRGB(0, 0, 0)
    colorSelector.ZIndex = 205
    colorSelector.Parent = hueSatFrame

    local selectorCorner = Instance.new("UICorner")
    selectorCorner.CornerRadius = UDim.new(0.5, 0)
    selectorCorner.Parent = colorSelector

    -- Hue slider
    local hueSliderFrame = Instance.new("TextButton")
    hueSliderFrame.Name = "HueSliderFrame"
    hueSliderFrame.Size = UDim2.new(1, -20, 0, 25)
    hueSliderFrame.Position = UDim2.new(0, 10, 0, 280)
    hueSliderFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    hueSliderFrame.BorderSizePixel = 1
    hueSliderFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    hueSliderFrame.Text = ""
    hueSliderFrame.ZIndex = 202
    hueSliderFrame.Parent = colorPickerFrame

    -- Hue gradient (rainbow, horizontal)
    local hueGradient = Instance.new("UIGradient")
    hueGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    hueGradient.Rotation = 0 -- horizontal
    hueGradient.Parent = hueSliderFrame

    -- Hue slider handle
    local hueSliderHandle = Instance.new("Frame")
    hueSliderHandle.Name = "HueSliderHandle"
    hueSliderHandle.Size = UDim2.new(0, 4, 1, 8)
    hueSliderHandle.Position = UDim2.new(0, -2, 0, -4)
    hueSliderHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueSliderHandle.BorderSizePixel = 1
    hueSliderHandle.BorderColor3 = Color3.fromRGB(0, 0, 0)
    hueSliderHandle.ZIndex = 203
    hueSliderHandle.Parent = hueSliderFrame

    -- Preview section
    local previewFrame = Instance.new("Frame")
    previewFrame.Name = "PreviewFrame"
    previewFrame.Size = UDim2.new(1, -20, 0, 45)
    previewFrame.Position = UDim2.new(0, 10, 0, 315)
    previewFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    previewFrame.BorderSizePixel = 1
    previewFrame.BorderColor3 = Color3.fromRGB(70, 70, 70)
    previewFrame.ZIndex = 202
    previewFrame.Parent = colorPickerFrame

    -- Color preview
    local colorPreview = Instance.new("Frame")
    colorPreview.Name = "ColorPreview"
    colorPreview.Size = UDim2.new(0, 70, 1, -6)
    colorPreview.Position = UDim2.new(0, 3, 0, 3)
    colorPreview.BackgroundColor3 = config.Default or Color3.fromRGB(255, 100, 100)
    colorPreview.BorderSizePixel = 1
    colorPreview.BorderColor3 = Color3.fromRGB(30, 30, 30)
    colorPreview.ZIndex = 203
    colorPreview.Parent = previewFrame

    local previewCorner = Instance.new("UICorner")
    previewCorner.CornerRadius = UDim.new(0, 4)
    previewCorner.Parent = colorPreview

    -- RGB values display
    local rgbLabel = Instance.new("TextLabel")
    rgbLabel.Size = UDim2.new(1, -80, 1, 0)
    rgbLabel.Position = UDim2.new(0, 80, 0, 0)
    rgbLabel.BackgroundTransparency = 1
    rgbLabel.Text = "RGB: 255, 255, 255"
    rgbLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    rgbLabel.TextSize = 14
    rgbLabel.Font = Enum.Font.Gotham
    rgbLabel.TextXAlignment = Enum.TextXAlignment.Left
    rgbLabel.TextYAlignment = Enum.TextYAlignment.Center
    rgbLabel.ZIndex = 203
    rgbLabel.Parent = previewFrame

    -- Buttons
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Name = "ButtonFrame"
    buttonFrame.Size = UDim2.new(1, -20, 0, 35)
    buttonFrame.Position = UDim2.new(0, 10, 0, 370)
    buttonFrame.BackgroundTransparency = 1
    buttonFrame.ZIndex = 202
    buttonFrame.Parent = colorPickerFrame

    local confirmButton = Instance.new("TextButton")
    confirmButton.Name = "ConfirmButton"
    confirmButton.Size = UDim2.new(0.48, 0, 1, 0)
    confirmButton.Position = UDim2.new(0, 0, 0, 0)
    confirmButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    confirmButton.BorderSizePixel = 0
    confirmButton.Text = "Confirm"
    confirmButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    confirmButton.TextSize = 16
    confirmButton.Font = Enum.Font.GothamBold
    confirmButton.ZIndex = 203
    confirmButton.Parent = buttonFrame

    local cancelButton = Instance.new("TextButton")
    cancelButton.Name = "CancelButton"
    cancelButton.Size = UDim2.new(0.48, 0, 1, 0)
    cancelButton.Position = UDim2.new(0.52, 0, 0, 0)
    cancelButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
    cancelButton.BorderSizePixel = 0
    cancelButton.Text = "Cancel"
    cancelButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    cancelButton.TextSize = 16
    cancelButton.Font = Enum.Font.GothamBold
    cancelButton.ZIndex = 203
    cancelButton.Parent = buttonFrame

    -- Color picker logic
    local currentHue = 0
    local currentSat = 1
    local currentBright = 1
    local selectedColor = config.Default or Color3.fromRGB(255, 255, 255)

    local function hsvToRgb(h, s, v)
        -- h, s, v in [0,1]
        local r, g, b
        local i = math.floor(h * 6)
        local f = h * 6 - i
        local p = v * (1 - s)
        local q = v * (1 - f * s)
        local t = v * (1 - (1 - f) * s)
        local imod = i % 6
        if imod == 0 then r, g, b = v, t, p
        elseif imod == 1 then r, g, b = q, v, p
        elseif imod == 2 then r, g, b = p, v, t
        elseif imod == 3 then r, g, b = p, q, v
        elseif imod == 4 then r, g, b = t, p, v
        elseif imod == 5 then r, g, b = v, p, q end
        return Color3.fromRGB(math.clamp(r * 255, 0, 255), math.clamp(g * 255, 0, 255), math.clamp(b * 255, 0, 255))
    end

    local function updateColorFromHSV()
        -- Set the base color of the main color area to the current hue (full sat, full bright)
        local hueColor = hsvToRgb(currentHue, 1, 1)
        hueSatFrame.BackgroundColor3 = hueColor
        selectedColor = hsvToRgb(currentHue, currentSat, currentBright)
        colorPreview.BackgroundColor3 = selectedColor
        local r = math.floor(selectedColor.R * 255)
        local g = math.floor(selectedColor.G * 255)
        local b = math.floor(selectedColor.B * 255)
        rgbLabel.Text = string.format("RGB: %d, %d, %d", r, g, b)
    end

    local function updateSelectorPosition()
        colorSelector.Position = UDim2.new(currentSat, -7, 1 - currentBright, -7)
    end

    local function updateHueSliderPosition()
        hueSliderHandle.Position = UDim2.new(currentHue, -2, 0, -4)
    end

    -- On any change, update all UI
    local function updateAll()
        updateColorFromHSV()
        updateSelectorPosition()
        updateHueSliderPosition()
    end

    -- Update on open
    local function openColorPicker()
        colorPickerOverlay.Visible = true
        selectedColor = colorButton.BackgroundColor3
        local r = math.floor(selectedColor.R * 255)
        local g = math.floor(selectedColor.G * 255)
        local b = math.floor(selectedColor.B * 255)
        rgbLabel.Text = string.format("RGB: %d, %d, %d", r, g, b)
        updateAll()
        colorPickerFrame.Position = UDim2.new(0.5, -175, 0.5, -250)
        local slideIn = TweenService:Create(colorPickerFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Position = UDim2.new(0.5, -175, 0.5, -210)
        })
        slideIn:Play()
    end

    -- Update on drag
    hueSatFrame.InputBegan:Connect(function(inputObject)
        if inputObject.UserInputType == Enum.UserInputType.MouseButton1 or inputObject.UserInputType == Enum.UserInputType.Touch then
            isDraggingColor = true
            updateColorFromPosition(inputObject)
            updateAll()
        end
    end)
    hueSatFrame.InputChanged:Connect(function(inputObject)
        if isDraggingColor and (inputObject.UserInputType == Enum.UserInputType.MouseMovement or inputObject.UserInputType == Enum.UserInputType.Touch) then
            updateColorFromPosition(inputObject)
            updateAll()
        end
    end)
    hueSatFrame.InputEnded:Connect(function(inputObject)
        if inputObject.UserInputType == Enum.UserInputType.MouseButton1 or inputObject.UserInputType == Enum.UserInputType.Touch then
            isDraggingColor = false
        end
    end)
    hueSliderFrame.InputBegan:Connect(function(inputObject)
        if inputObject.UserInputType == Enum.UserInputType.MouseButton1 or inputObject.UserInputType == Enum.UserInputType.Touch then
            isDraggingHue = true
            updateHueFromPosition(inputObject)
            updateAll()
        end
    end)
    hueSliderFrame.InputChanged:Connect(function(inputObject)
        if isDraggingHue and (inputObject.UserInputType == Enum.UserInputType.MouseMovement or inputObject.UserInputType == Enum.UserInputType.Touch) then
            updateHueFromPosition(inputObject)
            updateAll()
        end
    end)
    hueSliderFrame.InputEnded:Connect(function(inputObject)
        if inputObject.UserInputType == Enum.UserInputType.MouseButton1 or inputObject.UserInputType == Enum.UserInputType.Touch then
            isDraggingHue = false
        end
    end)

    local function closeColorPicker()
        colorPickerOverlay.Visible = false
    end
    confirmButton.MouseButton1Click:Connect(function()
        colorButton.BackgroundColor3 = selectedColor
        if config.Callback then
            config.Callback(selectedColor)
        end
        closeColorPicker()
    end)
    cancelButton.MouseButton1Click:Connect(function()
        closeColorPicker()
    end)
    pickerCloseButton.MouseButton1Click:Connect(function()
        closeColorPicker()
    end)
    colorButton.MouseButton1Click:Connect(function()
        openColorPicker()
    end)
    colorPickerOverlay.InputBegan:Connect(function(inputObject)
        if (inputObject.UserInputType == Enum.UserInputType.MouseButton1 or inputObject.UserInputType == Enum.UserInputType.Touch) and inputObject.Target == colorPickerOverlay then
            closeColorPicker()
        end
    end)
    -- Add to appropriate side
    if config.Side == "Right" then
        if tab.rightElements then
            table.insert(tab.rightElements, container)
        end
    else
        if tab.leftElements then
            table.insert(tab.leftElements, container)
        end
    end
    return {
        SetValue = function(value)
            if typeof(value) == "Color3" then
                colorButton.BackgroundColor3 = value
                if config.Callback then
                    config.Callback(value)
                end
            end
        end,
        GetValue = function()
            return colorButton.BackgroundColor3
        end
    }
end

-- Tab System
function RadiantHub:CreateTab(config)
    config = config or {}
    if not config then
        warn("RadiantHub: CreateTab requires a config table")
        return
    end
    
    local tab = {
        name = tostring(config.Name or "Tab"),
        icon = tostring(config.Icon or "⌂"),
        leftTitle = tostring(config.LeftTitle or "FEATURES"),
        rightTitle = tostring(config.RightTitle or "SETTINGS"),
        leftElements = {},
        rightElements = {}
    }
    
    table.insert(self.tabs, tab)
    
    -- Create tab button
    self:_createTabButton(tab, #self.tabs - 1)
    
    -- Set as current tab if it's the first one
    if #self.tabs == 1 then
        self.currentTab = tab
        -- Only update display if UI is fully initialized
        if self.leftContent and self.rightContent then
            self:_updateTabDisplay(tab)
        end
    end
    
    -- Return tab object with methods
    return {
        CreateToggle = function(config) return self:_createToggle(tab, config) end,
        CreateSlider = function(config) return self:_createSlider(tab, config) end,
        CreateDropdown = function(config) return self:_createDropdown(tab, config) end,
        CreateMultiDropdown = function(config) return self:_createMultiDropdown(tab, config) end,
        CreateColorPicker = function(config) return self:_createColorPicker(tab, config) end,
        CreateButton = function(config) return self:_createButton(tab, config) end
    }
end

function RadiantHub:_createTabButton(tab, index)
    if not self.leftSidebar then
        warn("RadiantHub: Left sidebar not initialized")
        return
    end
    
    local container = Instance.new("Frame")
    container.Name = tab.name .. "Container"
    container.Size = UDim2.new(1, 0, 0, 45)
    container.Position = UDim2.new(0, -10, 0, 15 + (index * 45))
    container.BackgroundTransparency = 1
    container.Parent = self.leftSidebar
    
    local indicator = Instance.new("Frame")
    indicator.Name = "Indicator"
    indicator.Size = UDim2.new(0, 3, 0, 25)
    indicator.Position = UDim2.new(0, 10, 0.5, -12.5)
    indicator.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    indicator.BorderSizePixel = 0
    indicator.Visible = index == 0
    indicator.Parent = container
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 2)
    indicatorCorner.Parent = indicator
    
    local button = Instance.new("TextButton")
    button.Name = tab.name .. "Tab"
    button.Size = UDim2.new(1, -10, 1, 0)
    button.Position = UDim2.new(0, 10, 0, 0)
    button.BackgroundTransparency = 1
    button.BorderSizePixel = 0
    button.Text = ""
    button.Parent = container
    
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Name = "Icon"
    iconLabel.Size = UDim2.new(0, 16, 0, 16)
    iconLabel.Position = UDim2.new(0, 12, 0.5, -8)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = tab.icon
    iconLabel.TextColor3 = index == 0 and Color3.fromRGB(220, 50, 47) or Color3.fromRGB(160, 160, 160)
    iconLabel.TextSize = 14
    iconLabel.Font = Enum.Font.Gotham
    iconLabel.TextXAlignment = Enum.TextXAlignment.Center
    iconLabel.TextYAlignment = Enum.TextYAlignment.Center
    iconLabel.Parent = button
    
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(0, 1, 0, 16)
    separator.Position = UDim2.new(0, 34, 0.5, -8)
    separator.BackgroundColor3 = index == 0 and Color3.fromRGB(220, 50, 47) or Color3.fromRGB(80, 80, 80)
    separator.BorderSizePixel = 0
    separator.Parent = button
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.Size = UDim2.new(1, -45, 1, 0)
    textLabel.Position = UDim2.new(0, 40, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = tab.name
    textLabel.TextColor3 = index == 0 and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(160, 160, 160)
    textLabel.TextSize = 15
    textLabel.Font = Enum.Font.GothamSemibold
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.Parent = button
    
    button.Activated:Connect(function()
        self.currentTab = tab
        self:_updateTabDisplay(tab)
        self:_updateTabButtons(tab)
    end)
end

function RadiantHub:_updateTabButtons(activeTab)
    if not self.leftSidebar then
        return
    end
    
    for i, tab in ipairs(self.tabs) do
        local container = self.leftSidebar:FindFirstChild(tab.name .. "Container")
        if container then
            local indicator = container:FindFirstChild("Indicator")
            local button = container:FindFirstChild(tab.name .. "Tab")
            if button then
                local icon = button:FindFirstChild("Icon")
                local text = button:FindFirstChild("Text")
                local separator = button:FindFirstChild("Separator")
                
                if tab == activeTab then
                    if indicator then indicator.Visible = true end
                    if icon then icon.TextColor3 = Color3.fromRGB(220, 50, 47) end
                    if text then text.TextColor3 = Color3.fromRGB(255, 255, 255) end
                    if separator then separator.BackgroundColor3 = Color3.fromRGB(220, 50, 47) end
                else
                    if indicator then indicator.Visible = false end
                    if icon then icon.TextColor3 = Color3.fromRGB(160, 160, 160) end
                    if text then text.TextColor3 = Color3.fromRGB(160, 160, 160) end
                    if separator then separator.BackgroundColor3 = Color3.fromRGB(80, 80, 80) end
                end
            end
        end
    end
end

function RadiantHub:_updateTabDisplay(tab)
    -- Safety checks
    if not self.leftContent or not self.rightContent then
        warn("RadiantHub: Content areas not initialized")
        return
    end
    
    -- Clear existing content
    for _, child in ipairs(self.leftContent:GetChildren()) do
        if child.Name:find("Container") then
            child.Parent = nil
            -- child:Destroy() -- Do not destroy, just remove from parent
        end
    end
    
    for _, child in ipairs(self.rightContent:GetChildren()) do
        if child.Name:find("Container") then
            child.Parent = nil
            -- child:Destroy() -- Do not destroy, just remove from parent
        end
    end
    
    -- Update headers
    if self.leftHeader then
        self.leftHeader.Text = tab.leftTitle
    end
    if self.rightHeader then
        self.rightHeader.Text = tab.rightTitle
    end
    
    -- Recreate elements
    local leftY = 10
    local rightY = 10
    
    if tab.leftElements then
        for _, element in ipairs(tab.leftElements) do
            if element then
                element.Position = UDim2.new(0, 0, 0, leftY)
                element.Parent = self.leftContent
                leftY = leftY + element.Size.Y.Offset + 5
            end
        end
    end
    
    if tab.rightElements then
        for _, element in ipairs(tab.rightElements) do
            if element then
                element.Position = UDim2.new(0, 0, 0, rightY)
                element.Parent = self.rightContent
                rightY = rightY + element.Size.Y.Offset + 5
            end
        end
    end
end

-- UI Elements
function RadiantHub:_createToggle(tab, config)
    config = config or {}
    if not tab or not tab.leftElements or not tab.rightElements then
        warn("RadiantHub: Invalid tab object passed to _createToggle!")
        return
    end
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Toggle") .. "Container"
    container.Size = UDim2.new(1, -10, 0, 30)
    container.BackgroundTransparency = 1

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -35, 1, 0)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "Toggle"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 16
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = container

    local checkbox = Instance.new("TextButton")
    checkbox.Size = UDim2.new(0, 20, 0, 20)
    checkbox.Position = UDim2.new(1, -25, 0.5, -10)
    checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    checkbox.BorderSizePixel = 1
    checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
    checkbox.Text = ""
    checkbox.Parent = container

    -- Gradient background (black to red)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    })
    gradient.Rotation = 45
    gradient.Parent = checkbox

    local checkmark = Instance.new("TextLabel")
    checkmark.Size = UDim2.new(1, 0, 1, 0)
    checkmark.BackgroundTransparency = 1
    checkmark.Text = "✓"
    checkmark.TextColor3 = Color3.fromRGB(0, 255, 100)
    checkmark.TextSize = 14
    checkmark.Font = Enum.Font.GothamBold
    checkmark.TextStrokeTransparency = 0
    checkmark.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    checkmark.Visible = config.Default or false
    checkmark.Parent = checkbox

    local isEnabled = config.Default or false
    self.settings[config.Name or "Toggle"] = isEnabled

    if isEnabled then
        checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
        checkmark.Visible = true
        textLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
    end

    checkbox.Activated:Connect(function()
        isEnabled = not isEnabled
        self.settings[config.Name or "Toggle"] = isEnabled

        if isEnabled then
            checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
            checkmark.Visible = true
            textLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
            self:CreateNotification("Setting Enabled", (config.Name or "Toggle") .. " enabled", 2)
        else
            checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
            checkmark.Visible = false
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            self:CreateNotification("Setting Disabled", (config.Name or "Toggle") .. " disabled", 2)
        end

        if config.Callback then
            config.Callback(isEnabled)
        end
    end)

    -- Add to appropriate side
    if config.Side == "Right" then
        if tab.rightElements then
            table.insert(tab.rightElements, container)
        end
    else
        if tab.leftElements then
            table.insert(tab.leftElements, container)
        end
    end

    return {
        SetValue = function(value)
            if type(value) == "table" or type(value) == "function" then return end
            local boolValue = value
            if type(value) == "string" then
                boolValue = value:lower() == "true"
            elseif type(value) == "number" then
                boolValue = value ~= 0
            else
                boolValue = not not value
            end
            isEnabled = boolValue
            self.settings[config.Name or "Toggle"] = boolValue
            checkmark.Visible = boolValue
            if boolValue then
                checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
                textLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
            else
                checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
                textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            end
            if config.Callback then
                config.Callback(isEnabled)
            end
        end,
        GetValue = function()
            return isEnabled
        end
    }
end

function RadiantHub:_createSlider(tab, config)
    config = config or {}
    if not tab or not tab.leftElements or not tab.rightElements then
        warn("RadiantHub: Invalid tab object passed to _createSlider!")
        return
    end
    if not config then warn("RadiantHub: Slider config is missing") return end
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Slider") .. "Container"
    container.Size = UDim2.new(1, -10, 0, 40)
    container.BackgroundTransparency = 1

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0.6, 0, 0, 20)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "Slider"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = container

    local minVal = tonumber(config.Min) or 0
    local maxVal = tonumber(config.Max) or 100
    local currentValue = tonumber(config.Default) or minVal
    self.settings[config.Name or "Slider"] = currentValue

    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0.3, 0, 0, 20)
    valueLabel.Position = UDim2.new(0.7, 0, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(currentValue)
    valueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    valueLabel.TextSize = 12
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.TextStrokeTransparency = 0
    valueLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    valueLabel.Parent = container

    local sliderBG = Instance.new("TextButton")
    sliderBG.Size = UDim2.new(1, -20, 0, 8)
    sliderBG.Position = UDim2.new(0, 10, 1, -12)
    sliderBG.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    sliderBG.BorderSizePixel = 1
    sliderBG.BorderColor3 = Color3.fromRGB(50, 50, 50)
    sliderBG.Text = ""
    sliderBG.Parent = container

    local initPos = (currentValue - minVal) / (maxVal - minVal)
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(initPos, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundTransparency = 0
    sliderFill.BackgroundColor3 = Color3.new(1, 1, 1)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBG

    -- Gradient for slider fill (black to red)
    local sliderGradient = Instance.new("UIGradient")
    sliderGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    sliderGradient.Rotation = 0
    sliderGradient.Parent = sliderFill

    local sliderHandle = Instance.new("TextButton")
    sliderHandle.Size = UDim2.new(0, 12, 0, 12)
    sliderHandle.Position = UDim2.new(initPos, -6, 0.5, -6)
    sliderHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderHandle.BorderSizePixel = 1
    sliderHandle.BorderColor3 = Color3.fromRGB(200, 200, 200)
    sliderHandle.Text = ""
    sliderHandle.Parent = sliderBG

    local isDragging = false
    local function updateSlider(inputPos)
        local pos = math.clamp((inputPos.X - sliderBG.AbsolutePosition.X) / sliderBG.AbsoluteSize.X, 0, 1)
        local value = math.floor(minVal + (maxVal - minVal) * pos)
        currentValue = value
        self.settings[config.Name or "Slider"] = value
        sliderFill.Size = UDim2.new(pos, 0, 1, 0)
        sliderHandle.Position = UDim2.new(pos, -6, 0.5, -6)
        valueLabel.Text = tostring(value)
        if config.Callback then
            config.Callback(value)
        end
    end
    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            updateSlider(input.Position)
        end
    end)
    sliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            updateSlider(input.Position)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input.Position)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    -- Add to appropriate side
    if config.Side == "Right" then
        if tab.rightElements then
            table.insert(tab.rightElements, container)
        end
    else
        if tab.leftElements then
            table.insert(tab.leftElements, container)
        end
    end
    return {
        SetValue = function(value)
            if value == nil or type(value) == "table" or type(value) == "function" then return end
            local numValue = tonumber(value)
            if not numValue then return end
            currentValue = math.clamp(numValue, minVal, maxVal)
            self.settings[config.Name or "Slider"] = currentValue
            local pos = (currentValue - minVal) / (maxVal - minVal)
            sliderFill.Size = UDim2.new(pos, 0, 1, 0)
            sliderHandle.Position = UDim2.new(pos, -6, 0.5, -6)
            valueLabel.Text = tostring(currentValue)
            if config.Callback then
                config.Callback(currentValue)
            end
        end,
        GetValue = function()
            return currentValue
        end
    }
end

function RadiantHub:_createDropdown(tab, config)
    config = config or {}
    if not tab or not tab.leftElements or not tab.rightElements then
        warn("RadiantHub: Invalid tab object passed to _createDropdown!")
        return
    end
    if not config then
        warn("RadiantHub: Dropdown config is missing")
        return
    end
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Dropdown") .. "Container"
    container.Size = UDim2.new(1, -10, 0, 35)
    container.BackgroundTransparency = 1
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0.4, 0, 1, 0)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "Dropdown"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.Parent = container
    local currentIndex = config.Default or 1
    local options = config.Options or {"Option 1", "Option 2"}
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(0.55, -10, 0, 25)
    dropdown.Position = UDim2.new(0.45, 0, 0.5, -12.5)
    dropdown.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    dropdown.BorderSizePixel = 1
    dropdown.BorderColor3 = Color3.fromRGB(100, 100, 100)
    dropdown.Text = tostring(options[currentIndex]) .. " ▼"
    dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.TextStrokeTransparency = 0
    dropdown.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    dropdown.TextSize = 11
    dropdown.Font = Enum.Font.Gotham
    dropdown.ZIndex = 2
    dropdown.Parent = container
    local dropdownMenu = Instance.new("Frame")
    dropdownMenu.Name = "DropdownMenu"
    -- Dynamically set height based on options (max 6 visible)
    local maxVisible = 6
    local menuHeight = math.min(#options, maxVisible) * 25 + (config.Searchable and 30 or 0)
    dropdownMenu.Size = UDim2.new(0.55, -10, 0, menuHeight)
    dropdownMenu.Position = UDim2.new(0.45, 0, 1, 0)
    dropdownMenu.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    dropdownMenu.BorderSizePixel = 1
    dropdownMenu.BorderColor3 = Color3.fromRGB(100, 100, 100)
    dropdownMenu.Visible = false
    dropdownMenu.ZIndex = 3
    dropdownMenu.Parent = container
    local searchBox
    local optionsFrame
    if config.Searchable then
        searchBox = Instance.new("TextBox")
        searchBox.Name = "SearchBox"
        searchBox.Size = UDim2.new(1, -10, 0, 25)
        searchBox.Position = UDim2.new(0, 5, 0, 2.5)
        searchBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        searchBox.BorderSizePixel = 1
        searchBox.BorderColor3 = Color3.fromRGB(100, 100, 100)
        searchBox.Text = ""
        searchBox.PlaceholderText = "Search..."
        searchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
        searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        searchBox.TextStrokeTransparency = 0
        searchBox.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        searchBox.TextSize = 10
        searchBox.Font = Enum.Font.Gotham
        searchBox.ZIndex = 4
        searchBox.Parent = dropdownMenu
        optionsFrame = Instance.new("ScrollingFrame")
        optionsFrame.Name = "OptionsFrame"
        optionsFrame.Size = UDim2.new(1, 0, 1, -30)
        optionsFrame.Position = UDim2.new(0, 0, 0, 30)
    else
        optionsFrame = Instance.new("ScrollingFrame")
        optionsFrame.Name = "OptionsFrame"
        optionsFrame.Size = UDim2.new(1, 0, 1, 0)
        optionsFrame.Position = UDim2.new(0, 0, 0, 0)
    end
    optionsFrame.BackgroundTransparency = 1
    optionsFrame.BorderSizePixel = 0
    optionsFrame.ScrollBarThickness = 6
    optionsFrame.ZIndex = 4
    optionsFrame.Parent = dropdownMenu
    local isOpen = false
    local optionButtons = {}
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 0, 25)
        optionButton.Position = UDim2.new(0, 0, 0, (i-1) * 25)
        optionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionButton.TextStrokeTransparency = 0
        optionButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        optionButton.TextSize = 11
        optionButton.Font = Enum.Font.Gotham
        optionButton.ZIndex = 5
        optionButton.Parent = optionsFrame
        table.insert(optionButtons, {button = optionButton, text = option, index = i})
        optionButton.MouseEnter:Connect(function()
            optionButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
        end)
        optionButton.MouseLeave:Connect(function()
            optionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end)
        optionButton.MouseButton1Click:Connect(function()
            dropdown.Text = option .. " ▼"
            currentIndex = i
            self.settings[config.Name or "Dropdown"] = i
            dropdownMenu.Visible = false
            isOpen = false
            if config.Callback then
                config.Callback(option, i)
            end
        end)
    end
    optionsFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 25)
    if searchBox then
        searchBox:GetPropertyChangedSignal("Text"):Connect(function()
            local searchTerm = searchBox.Text:lower()
            local visibleCount = 0
            for _, optionData in ipairs(optionButtons) do
                if searchTerm == "" or optionData.text:lower():find(searchTerm) then
                    optionData.button.Visible = true
                    optionData.button.Position = UDim2.new(0, 0, 0, visibleCount * 25)
                    visibleCount = visibleCount + 1
                else
                    optionData.button.Visible = false
                end
            end
            optionsFrame.CanvasSize = UDim2.new(0, 0, 0, visibleCount * 25)
            dropdownMenu.Size = UDim2.new(0.55, -10, 0, math.min(visibleCount * 25 + 30, 200))
        end)
    end
    dropdown.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownMenu.Visible = isOpen
        if isOpen then
            dropdown.Text = tostring(options[currentIndex]) .. " ▲"
            if searchBox then
                searchBox.Text = ""
                searchBox:CaptureFocus()
            end
        else
            dropdown.Text = tostring(options[currentIndex]) .. " ▼"
        end
    end)
    if config.Side == "Right" then
        if tab.rightElements then
            table.insert(tab.rightElements, container)
        end
    else
        if tab.leftElements then
            table.insert(tab.leftElements, container)
        end
    end
    return {
        SetValue = function(value)
            if type(value) == "table" or type(value) == "function" then return end
            local numValue = tonumber(value)
            if numValue and numValue >= 1 and numValue <= #options then
                currentIndex = numValue
                dropdown.Text = tostring(options[currentIndex]) .. " ▼"
                self.settings[config.Name or "Dropdown"] = currentIndex
                if config.Callback then
                    config.Callback(options[currentIndex], currentIndex)
                end
            else
                return
            end
        end,
        GetValue = function()
            return currentIndex, options[currentIndex]
        end
    }
end

function RadiantHub:_createMultiDropdown(tab, config)
    config = config or {}
    if not tab or not tab.leftElements or not tab.rightElements then
        warn("RadiantHub: Invalid tab object passed to _createMultiDropdown!")
        return
    end
    local container = Instance.new("Frame")
    container.Name = (config.Name or "MultiDropdown") .. "Container"
    container.Size = UDim2.new(1, -10, 0, 35)
    container.BackgroundTransparency = 1
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0.4, 0, 1, 0)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "MultiDropdown"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.Parent = container
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(0.55, -10, 0, 25)
    dropdown.Position = UDim2.new(0.45, 0, 0.5, -12.5)
    dropdown.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    dropdown.BorderSizePixel = 1
    dropdown.BorderColor3 = Color3.fromRGB(100, 100, 100)
    dropdown.Text = "Multiple ▼"
    dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.TextStrokeTransparency = 0
    dropdown.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    dropdown.TextSize = 11
    dropdown.Font = Enum.Font.Gotham
    dropdown.ZIndex = 2
    dropdown.Parent = container
    local options = config.Options or {"Option 1", "Option 2"}
    local maxVisible = 6
    local menuHeight = math.min(#options, maxVisible) * 25 + (config.Searchable and 30 or 0)
    local dropdownMenu = Instance.new("Frame")
    dropdownMenu.Name = "MultiDropdownMenu"
    dropdownMenu.Size = UDim2.new(0.55, -10, 0, menuHeight)
    dropdownMenu.Position = UDim2.new(0.45, 0, 1, 0)
    dropdownMenu.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    dropdownMenu.BorderSizePixel = 1
    dropdownMenu.BorderColor3 = Color3.fromRGB(100, 100, 100)
    dropdownMenu.Visible = false
    dropdownMenu.ZIndex = 3
    dropdownMenu.Parent = container
    local searchBox
    local optionsFrame
    if config.Searchable then
        searchBox = Instance.new("TextBox")
        searchBox.Name = "SearchBox"
        searchBox.Size = UDim2.new(1, -10, 0, 25)
        searchBox.Position = UDim2.new(0, 5, 0, 2.5)
        searchBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        searchBox.BorderSizePixel = 1
        searchBox.BorderColor3 = Color3.fromRGB(100, 100, 100)
        searchBox.Text = ""
        searchBox.PlaceholderText = "Search..."
        searchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
        searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        searchBox.TextStrokeTransparency = 0
        searchBox.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        searchBox.TextSize = 10
        searchBox.Font = Enum.Font.Gotham
        searchBox.ZIndex = 4
        searchBox.Parent = dropdownMenu
        optionsFrame = Instance.new("ScrollingFrame")
        optionsFrame.Name = "OptionsFrame"
        optionsFrame.Size = UDim2.new(1, 0, 1, -30)
        optionsFrame.Position = UDim2.new(0, 0, 0, 30)
    else
        optionsFrame = Instance.new("ScrollingFrame")
        optionsFrame.Name = "OptionsFrame"
        optionsFrame.Size = UDim2.new(1, 0, 1, 0)
        optionsFrame.Position = UDim2.new(0, 0, 0, 0)
    end
    optionsFrame.BackgroundTransparency = 1
    optionsFrame.BorderSizePixel = 0
    optionsFrame.ScrollBarThickness = 6
    optionsFrame.ZIndex = 4
    optionsFrame.Parent = dropdownMenu
    local isOpen = false
    local selectedCount = 0
    local selectedOptions = config.Default or {}
    local optionFrames = {}
    for option, isSelected in pairs(selectedOptions) do
        if isSelected then
            selectedCount = selectedCount + 1
        end
    end
    if selectedCount == 0 then
        dropdown.Text = "None Selected ▼"
    elseif selectedCount == 1 then
        dropdown.Text = "1 Selected ▼"
    else
        dropdown.Text = selectedCount .. " Selected ▼"
    end
    for i, option in ipairs(options) do
        local optionFrame = Instance.new("Frame")
        optionFrame.Size = UDim2.new(1, 0, 0, 25)
        optionFrame.Position = UDim2.new(0, 0, 0, (i-1) * 25)
        optionFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        optionFrame.BorderSizePixel = 0
        optionFrame.ZIndex = 4
        optionFrame.Parent = optionsFrame
        table.insert(optionFrames, {frame = optionFrame, text = option, index = i})
        local optionLabel = Instance.new("TextLabel")
        optionLabel.Size = UDim2.new(1, -25, 1, 0)
        optionLabel.Position = UDim2.new(0, 5, 0, 0)
        optionLabel.BackgroundTransparency = 1
        optionLabel.Text = option
        optionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionLabel.TextStrokeTransparency = 0
        optionLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        optionLabel.TextSize = 11
        optionLabel.Font = Enum.Font.Gotham
        optionLabel.TextXAlignment = Enum.TextXAlignment.Left
        optionLabel.TextYAlignment = Enum.TextYAlignment.Center
        optionLabel.ZIndex = 5
        optionLabel.Parent = optionFrame
        local checkbox = Instance.new("TextButton")
        checkbox.Size = UDim2.new(0, 15, 0, 15)
        checkbox.Position = UDim2.new(1, -20, 0.5, -7.5)
        checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        checkbox.BorderSizePixel = 1
        checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
        checkbox.Text = ""
        checkbox.ZIndex = 5
        checkbox.Parent = optionFrame
        local checkmark = Instance.new("TextLabel")
        checkmark.Size = UDim2.new(1, 0, 1, 0)
        checkmark.BackgroundTransparency = 1
        checkmark.Text = "✓"
        checkmark.TextColor3 = Color3.fromRGB(0, 255, 100)
        checkmark.TextStrokeTransparency = 0
        checkmark.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        checkmark.TextSize = 10
        checkmark.Font = Enum.Font.GothamBold
        checkmark.Visible = false
        checkmark.ZIndex = 6
        checkmark.Parent = checkbox
        if selectedOptions[option] == nil then
            selectedOptions[option] = false
        end
        if selectedOptions[option] then
            checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
            checkmark.Visible = true
        end
        optionFrame.MouseEnter:Connect(function()
            optionFrame.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        end)
        optionFrame.MouseLeave:Connect(function()
            optionFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end)
        checkbox.MouseButton1Click:Connect(function()
            selectedOptions[option] = not selectedOptions[option]
            if selectedOptions[option] then
                checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
                checkmark.Visible = true
                selectedCount = selectedCount + 1
            else
                checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
                checkmark.Visible = false
                selectedCount = selectedCount - 1
            end
            if selectedCount == 0 then
                dropdown.Text = "None Selected ▼"
            elseif selectedCount == 1 then
                dropdown.Text = "1 Selected ▼"
            else
                dropdown.Text = selectedCount .. " Selected ▼"
            end
            if config.Callback then
                config.Callback(selectedOptions)
            end
        end)
    end
    optionsFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 25)
    if searchBox then
        searchBox:GetPropertyChangedSignal("Text"):Connect(function()
            local searchTerm = searchBox.Text:lower()
            local visibleCount = 0
            for _, optionData in ipairs(optionFrames) do
                if searchTerm == "" or optionData.text:lower():find(searchTerm) then
                    optionData.frame.Visible = true
                    optionData.frame.Position = UDim2.new(0, 0, 0, visibleCount * 25)
                    visibleCount = visibleCount + 1
                else
                    optionData.frame.Visible = false
                end
            end
            optionsFrame.CanvasSize = UDim2.new(0, 0, 0, visibleCount * 25)
            dropdownMenu.Size = UDim2.new(0.55, -10, 0, math.min(visibleCount * 25 + 30, 200))
        end)
    end
    dropdown.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownMenu.Visible = isOpen
        if isOpen then
            if selectedCount == 0 then
                dropdown.Text = "None Selected ▲"
            elseif selectedCount == 1 then
                dropdown.Text = "1 Selected ▲"
            else
                dropdown.Text = selectedCount .. " Selected ▲"
            end
            if searchBox then
                searchBox.Text = ""
                searchBox:CaptureFocus()
            end
        else
            if selectedCount == 0 then
                dropdown.Text = "None Selected ▼"
            elseif selectedCount == 1 then
                dropdown.Text = "1 Selected ▼"
            else
                dropdown.Text = selectedCount .. " Selected ▼"
            end
        end
    end)
    if config.Side == "Right" then
        if tab.rightElements then
            table.insert(tab.rightElements, container)
        end
    else
        if tab.leftElements then
            table.insert(tab.leftElements, container)
        end
    end
    return {
        SetValue = function(value)
            if type(value) ~= "table" then return end
            selectedOptions = value
            if config.Callback then
                config.Callback(selectedOptions)
            end
        end,
        GetValue = function()
            return selectedOptions
        end
    }
end

function RadiantHub:_createButton(tab, config)
    config = config or {}
    if not tab or not tab.leftElements or not tab.rightElements then
        warn("RadiantHub: Invalid tab object passed to _createButton!")
        return
    end
    -- Safety checks
    if not config then
        warn("RadiantHub: Button config is missing")
        return
    end
    
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Button") .. "Container"
    container.Size = UDim2.new(1, -10, 0, 35)
    container.BackgroundTransparency = 1
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -20, 1, -5)
    button.Position = UDim2.new(0, 10, 0, 2.5)
    button.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    button.BorderSizePixel = 1
    button.BorderColor3 = Color3.fromRGB(150, 150, 150)
    button.Text = config.Name or "Button"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.GothamBold
    button.TextStrokeTransparency = 0
    button.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    button.Parent = container
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = button
    
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(255, 70, 67)
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    end)
    
    button.Activated:Connect(function()
        if config.Callback then
            pcall(config.Callback)
        end
    end)

    -- Add to appropriate side
    if config.Side == "Right" then
        if tab.rightElements then
            table.insert(tab.rightElements, container)
        end
    else
        if tab.leftElements then
            table.insert(tab.leftElements, container)
        end
    end

    -- Ensure UI updates if this is the current tab
    if self.currentTab == tab and self.leftContent and self.rightContent then
        self:_updateTabDisplay(tab)
    end

    return {
        SetText = function(text)
            button.Text = tostring(text or "Button")
        end
    }
end

-- Notification System
function RadiantHub:CreateNotification(title, message, duration)
    -- Safety checks
    if not self.notificationContainer then
        warn("RadiantHub: Notification container not initialized")
        return
    end
    
    title = tostring(title or "Notification")
    message = tostring(message or "")
    duration = duration or 3
    
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(1, 0, 0, 60)
    notification.Position = UDim2.new(1, 0, 1, -60 * (#self.notificationQueue + 1))
    notification.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    notification.BorderSizePixel = 0
    notification.Parent = self.notificationContainer
    
    table.insert(self.notificationQueue, notification)
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 6)
    notifCorner.Parent = notification
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -10, 0, 20)
    titleLabel.Position = UDim2.new(0, 8, 0, 8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 12
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -10, 0, 25)
    messageLabel.Position = UDim2.new(0, 8, 0, 28)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    messageLabel.TextSize = 10
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Parent = notification
    
    local slideIn = TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0, 0, 1, -60 * #self.notificationQueue)
    })
    slideIn:Play()
    
    spawn(function()
        wait(duration)
        for i, notif in ipairs(self.notificationQueue) do
            if notif == notification then
                table.remove(self.notificationQueue, i)
                break
            end
        end
        
        local slideOut = TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 0, notification.Position.Y.Scale, notification.Position.Y.Offset)
        })
        slideOut:Play()
        slideOut.Completed:Connect(function()
            notification:Destroy()
        end)
    end)
end

-- Setup Functions
function RadiantHub:_setupAnimations()
    -- Border gradient animation
    local function animateGradient()
        local tweenInfo = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1)
        local tween = TweenService:Create(self.borderGradient, tweenInfo, {Rotation = 405})
        tween:Play()
    end
    
    -- RGB text animation
    local function animateRGBText()
        local hue = 0
        RunService.Heartbeat:Connect(function()
            hue = (hue + 2) % 360
            local r = math.floor(127.5 * (1 + math.sin(math.rad(hue))))
            local g = math.floor(127.5 * (1 + math.sin(math.rad(hue + 120))))
            local b = math.floor(127.5 * (1 + math.sin(math.rad(hue + 240))))
            self.radiantLabel.TextColor3 = Color3.fromRGB(r, g, b)
        end)
    end
    
    -- FPS counter
    local function updateFPS()
        local lastTime = tick()
        local frameCount = 0
        
        RunService.Heartbeat:Connect(function()
            frameCount = frameCount + 1
            local currentTime = tick()
            if currentTime - lastTime >= 1 then
                local fps = math.floor(frameCount / (currentTime - lastTime))
                self.fpsLabel.Text = fps .. " FPS"
                frameCount = 0
                lastTime = currentTime
            end
        end)
    end
    
    animateGradient()
    animateRGBText()
    updateFPS()
end

function RadiantHub:_setupControls()
    -- Minimize/Restore functionality
    local function minimizeUI()
        self.isMinimized = true
        self.mainFrame.Visible = false
        self.minimizedIcon.Visible = true
    end

    local function restoreUI()
        self.isMinimized = false
        self.mainFrame.Visible = true
        self.minimizedIcon.Visible = false
    end

    self.minimizeButton.Activated:Connect(minimizeUI)
    self.minimizedIcon.Activated:Connect(restoreUI)

    -- Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil

    self.titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = self.mainFrame.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                         input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            self.mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    -- Close button
    self.closeButton.Activated:Connect(function()
        self:Destroy()
    end)

    -- Keyboard shortcut (Right Ctrl to toggle)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
            if self.isMinimized then
                restoreUI()
            else
                minimizeUI()
            end
        end
    end)
end
print("dadadagfdfdghgdgfd")
-- Utility Functions
function RadiantHub:GetSetting(name)
    return self.settings[name]
end

function RadiantHub:SetSetting(name, value)
    self.settings[name] = value
end

function RadiantHub:DebugSettings()
    print("=== RadiantHub Settings Debug ===")
    for name, value in pairs(self.settings) do
        print(tostring(name) .. " = " .. tostring(value) .. " (type: " .. type(value) .. ")")
    end
    print("=== End Debug ===")
end

function RadiantHub:Destroy()
    if self.screenGui then
        self.screenGui:Destroy()
    end
    if self.watermarkGui then
        self.watermarkGui:Destroy()
    end
end

return RadiantHub
