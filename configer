-- RadiantHub UI Library
-- Mobile-Compatible Roblox UI Library with Modern Design

local RadiantHub = {}
RadiantHub.__index = RadiantHub

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local player = Players.LocalPlayer

-- Library Constructor
function RadiantHub:CreateWindow(config)
    local self = setmetatable({}, RadiantHub)
    
    -- Ensure config exists
    config = config or {}
    
    -- Configuration with proper type checking
    self.config = {
        Name = tostring(config.Name or "RadiantHub"),
        Size = config.Size or UDim2.new(0, 700, 0, 450),
        Position = config.Position or UDim2.new(0.5, -350, 0.5, -225),
        Theme = tostring(config.Theme or "Dark")
    }
    
    -- Internal state
    self.settings = {}
    self.tabs = {}
    self.currentTab = nil
    self.isMinimized = false
    self.notificationQueue = {}
    
    -- Create main UI
    self:_createMainUI()
    self:_createWatermark()
    self:_createNotificationSystem()
    self:_setupAnimations()
    self:_setupControls()
    
    return self
end

-- Main UI Creation
function RadiantHub:_createMainUI()
    -- Create ScreenGui
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "RadiantHub_" .. self.config.Name
    self.screenGui.ResetOnSpawn = false
    self.screenGui.Parent = CoreGui
    
    -- Main Frame
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Name = "MainFrame"
    self.mainFrame.Size = self.config.Size
    self.mainFrame.Position = self.config.Position
    self.mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Parent = self.screenGui
    
    -- Main gradient
    local mainGradient = Instance.new("UIGradient")
    mainGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 80)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 40))
    }
    mainGradient.Rotation = 135
    mainGradient.Parent = self.mainFrame
    
    -- Rainbow border
    self.borderFrame = Instance.new("Frame")
    self.borderFrame.Name = "BorderFrame"
    self.borderFrame.Size = UDim2.new(1, 8, 1, 8)
    self.borderFrame.Position = UDim2.new(0, -4, 0, -4)
    self.borderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.borderFrame.BorderSizePixel = 0
    self.borderFrame.ZIndex = 0
    self.borderFrame.Parent = self.mainFrame
    
    self.borderGradient = Instance.new("UIGradient")
    self.borderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 150)),
        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(255, 100, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 150))
    }
    self.borderGradient.Rotation = 45
    self.borderGradient.Parent = self.borderFrame
    
    -- Title Bar
    self.titleBar = Instance.new("Frame")
    self.titleBar.Name = "TitleBar"
    self.titleBar.Size = UDim2.new(1, 0, 0, 40)
    self.titleBar.Position = UDim2.new(0, 0, 0, 0)
    self.titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    self.titleBar.BorderSizePixel = 1
    self.titleBar.BorderColor3 = Color3.fromRGB(70, 70, 70)
    self.titleBar.Parent = self.mainFrame
    
    -- Title
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Name = "TitleLabel"
    self.titleLabel.Size = UDim2.new(1, -100, 1, 0)
    self.titleLabel.Position = UDim2.new(0, 20, 0, 0)
    self.titleLabel.BackgroundTransparency = 1
    self.titleLabel.Text = self.config.Name:upper()
    self.titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.titleLabel.TextSize = 18
    self.titleLabel.TextStrokeTransparency = 0
    self.titleLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    self.titleLabel.Font = Enum.Font.GothamBold
    self.titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.titleLabel.Parent = self.titleBar
    
    -- Control buttons
    self:_createControlButtons()
    
    -- Left Sidebar
    self.leftSidebar = Instance.new("Frame")
    self.leftSidebar.Name = "LeftSidebar"
    self.leftSidebar.Size = UDim2.new(0, 150, 1, -50)
    self.leftSidebar.Position = UDim2.new(0, 5, 0, 45)
    self.leftSidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    self.leftSidebar.BorderSizePixel = 0
    self.leftSidebar.Parent = self.mainFrame
    
    local sidebarCorner = Instance.new("UICorner")
    sidebarCorner.CornerRadius = UDim.new(0, 6)
    sidebarCorner.Parent = self.leftSidebar
    
    -- Content Area
    self.contentArea = Instance.new("Frame")
    self.contentArea.Name = "ContentArea"
    self.contentArea.Size = UDim2.new(1, -170, 1, -50)
    self.contentArea.Position = UDim2.new(0, 165, 0, 45)
    self.contentArea.BackgroundTransparency = 1
    self.contentArea.BorderSizePixel = 0
    self.contentArea.Parent = self.mainFrame
    
    -- User profile
    self:_createUserProfile()
    
    -- Minimized icon
    self:_createMinimizedIcon()
end

function RadiantHub:_createControlButtons()
    -- Minimize button
    self.minimizeButton = Instance.new("TextButton")
    self.minimizeButton.Name = "MinimizeButton"
    self.minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    self.minimizeButton.Position = UDim2.new(1, -70, 0, 5)
    self.minimizeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    self.minimizeButton.BorderSizePixel = 0
    self.minimizeButton.Text = "−"
    self.minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.minimizeButton.TextSize = 18
    self.minimizeButton.Font = Enum.Font.GothamBold
    self.minimizeButton.Parent = self.titleBar
    
    -- Close button
    self.closeButton = Instance.new("TextButton")
    self.closeButton.Name = "CloseButton"
    self.closeButton.Size = UDim2.new(0, 30, 0, 30)
    self.closeButton.Position = UDim2.new(1, -35, 0, 5)
    self.closeButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    self.closeButton.BorderSizePixel = 0
    self.closeButton.Text = "×"
    self.closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.closeButton.TextSize = 18
    self.closeButton.Font = Enum.Font.GothamBold
    self.closeButton.Parent = self.titleBar
end

function RadiantHub:_createUserProfile()
    local userProfileFrame = Instance.new("Frame")
    userProfileFrame.Name = "UserProfileFrame"
    userProfileFrame.Size = UDim2.new(1, -16, 0, 50)
    userProfileFrame.Position = UDim2.new(0, 8, 1, -58)
    userProfileFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    userProfileFrame.BorderSizePixel = 0
    userProfileFrame.Parent = self.leftSidebar
    
    local profileCorner = Instance.new("UICorner")
    profileCorner.CornerRadius = UDim.new(0, 6)
    profileCorner.Parent = userProfileFrame
    
    local userAvatar = Instance.new("ImageLabel")
    userAvatar.Name = "UserAvatar"
    userAvatar.Size = UDim2.new(0, 35, 0, 35)
    userAvatar.Position = UDim2.new(0, 8, 0.5, -17.5)
    userAvatar.BackgroundColor3 = Color3.fromRGB(255, 150, 100)
    userAvatar.BorderSizePixel = 0
    userAvatar.Image = "rbxthumb://type=AvatarHeadShot&id=" .. player.UserId .. "&w=150&h=150"
    userAvatar.Parent = userProfileFrame
    
    local avatarCorner = Instance.new("UICorner")
    avatarCorner.CornerRadius = UDim.new(0.5, 0)
    avatarCorner.Parent = userAvatar
    
    local usernameLabel = Instance.new("TextLabel")
    usernameLabel.Size = UDim2.new(1, -50, 0, 16)
    usernameLabel.Position = UDim2.new(0, 45, 0, 8)
    usernameLabel.BackgroundTransparency = 1
    usernameLabel.Text = player.Name
    usernameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    usernameLabel.TextSize = 12
    usernameLabel.Font = Enum.Font.GothamSemibold
    usernameLabel.TextXAlignment = Enum.TextXAlignment.Left
    usernameLabel.TextYAlignment = Enum.TextYAlignment.Center
    usernameLabel.TextTruncate = Enum.TextTruncate.AtEnd
    usernameLabel.Parent = userProfileFrame
end

function RadiantHub:_createMinimizedIcon()
    self.minimizedIcon = Instance.new("ImageButton")
    self.minimizedIcon.Name = "MinimizedIcon"
    self.minimizedIcon.Size = UDim2.new(0, 50, 0, 50)
    self.minimizedIcon.Position = UDim2.new(0, 50, 0, 50)
    self.minimizedIcon.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.minimizedIcon.BackgroundTransparency = 0.1
    self.minimizedIcon.BorderSizePixel = 2
    self.minimizedIcon.BorderColor3 = Color3.fromRGB(0, 150, 255)
    self.minimizedIcon.Image = "rbxassetid://139404696073599"
    self.minimizedIcon.ImageColor3 = Color3.fromRGB(255, 255, 255)
    self.minimizedIcon.ImageTransparency = 0.1
    self.minimizedIcon.Visible = false
    self.minimizedIcon.Parent = self.screenGui

    -- Minimized icon drag support
    local minimizedDragging = false
    local minimizedDragStart = nil
    local minimizedStartPos = nil
    self.minimizedIcon.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            minimizedDragging = true
            minimizedDragStart = input.Position
            minimizedStartPos = self.minimizedIcon.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if minimizedDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - minimizedDragStart
            self.minimizedIcon.Position = UDim2.new(minimizedStartPos.X.Scale, minimizedStartPos.X.Offset + delta.X, minimizedStartPos.Y.Scale, minimizedStartPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            minimizedDragging = false
        end
    end)
end

function RadiantHub:_createWatermark()
    self.watermarkGui = Instance.new("ScreenGui")
    self.watermarkGui.Name = "RadiantHub_Watermark"
    self.watermarkGui.ResetOnSpawn = false
    self.watermarkGui.Parent = CoreGui
    
    local watermarkFrame = Instance.new("Frame")
    watermarkFrame.Name = "WatermarkFrame"
    watermarkFrame.Size = UDim2.new(0, 250, 0, 25)
    watermarkFrame.Position = UDim2.new(1, -260, 0, 10)
    watermarkFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    watermarkFrame.BorderSizePixel = 0
    watermarkFrame.Parent = self.watermarkGui
    
    local watermarkCorner = Instance.new("UICorner")
    watermarkCorner.CornerRadius = UDim.new(0, 3)
    watermarkCorner.Parent = watermarkFrame
    
    -- Accent line
    local accentLine = Instance.new("Frame")
    accentLine.Name = "AccentLine"
    accentLine.Size = UDim2.new(0, 3, 1, 0)
    accentLine.Position = UDim2.new(0, 0, 0, 0)
    accentLine.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    accentLine.BorderSizePixel = 0
    accentLine.Parent = watermarkFrame
    
    local accentCorner = Instance.new("UICorner")
    accentCorner.CornerRadius = UDim.new(0, 3)
    accentCorner.Parent = accentLine
    
    -- Content frame
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -8, 1, 0)
    contentFrame.Position = UDim2.new(0, 8, 0, 0)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = watermarkFrame
    
    -- RadiantHub label
    self.radiantLabel = Instance.new("TextLabel")
    self.radiantLabel.Size = UDim2.new(0, 80, 1, 0)
    self.radiantLabel.Position = UDim2.new(0, 0, 0, 0)
    self.radiantLabel.BackgroundTransparency = 1
    self.radiantLabel.Text = self.config.Name
    self.radiantLabel.TextColor3 = Color3.fromRGB(255, 0, 128)
    self.radiantLabel.TextSize = 12
    self.radiantLabel.Font = Enum.Font.GothamBold
    self.radiantLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.radiantLabel.TextYAlignment = Enum.TextYAlignment.Center
    self.radiantLabel.Parent = contentFrame
    
    -- FPS Counter
    self.fpsLabel = Instance.new("TextLabel")
    self.fpsLabel.Size = UDim2.new(0, 50, 1, 0)
    self.fpsLabel.Position = UDim2.new(0, 90, 0, 0)
    self.fpsLabel.BackgroundTransparency = 1
    self.fpsLabel.Text = "60 FPS"
    self.fpsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    self.fpsLabel.TextSize = 11
    self.fpsLabel.Font = Enum.Font.Gotham
    self.fpsLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.fpsLabel.TextYAlignment = Enum.TextYAlignment.Center
    self.fpsLabel.Parent = contentFrame
    
    -- User info
    local userLabel = Instance.new("TextLabel")
    userLabel.Size = UDim2.new(1, -150, 1, 0)
    userLabel.Position = UDim2.new(0, 150, 0, 0)
    userLabel.BackgroundTransparency = 1
    userLabel.Text = player.Name
    userLabel.TextColor3 = Color3.fromRGB(160, 160, 160)
    userLabel.TextSize = 11
    userLabel.Font = Enum.Font.Gotham
    userLabel.TextXAlignment = Enum.TextXAlignment.Left
    userLabel.TextYAlignment = Enum.TextYAlignment.Center
    userLabel.TextTruncate = Enum.TextTruncate.AtEnd
    userLabel.Parent = contentFrame
end

function RadiantHub:_createNotificationSystem()
    self.notificationContainer = Instance.new("Frame")
    self.notificationContainer.Name = "NotificationContainer"
    self.notificationContainer.Size = UDim2.new(0, 300, 0, 200)
    self.notificationContainer.Position = UDim2.new(1, -310, 1, -210)
    self.notificationContainer.BackgroundTransparency = 1
    self.notificationContainer.Parent = self.watermarkGui
end

-- Tab System
function RadiantHub:CreateTab(config)
    config = config or {}
    if not config then
        warn("RadiantHub: CreateTab requires a config table")
        return nil
    end
    
    local tab = {
        name = tostring(config.Name or "Tab"),
        icon = tostring(config.Icon or "⌂"),
        sections = {},
        sectionOrder = {},
        elementData = {} -- Store element creation data for recreation
    }
    
    -- Store reference to the RadiantHub instance
    tab._radiantHubInstance = self
    
    function tab:AddSection(sectionName)
        local section = {
            name = sectionName or "Section",
            elements = {},
            elementConfigs = {}, -- Store configs for recreation
            _radiantHubInstance = self._radiantHubInstance
        }
        
        -- Bind element creation methods to the section with proper context
        function section:CreateToggle(config) 
            local element = self._radiantHubInstance:_createToggle(self, config)
            table.insert(self.elementConfigs, {type = "toggle", config = config})
            return element
        end
        function section:CreateSlider(config) 
            local element = self._radiantHubInstance:_createSlider(self, config)
            table.insert(self.elementConfigs, {type = "slider", config = config})
            return element
        end
        function section:CreateDropdown(config) 
            local element = self._radiantHubInstance:_createDropdown(self, config)
            table.insert(self.elementConfigs, {type = "dropdown", config = config})
            return element
        end
        function section:CreateMultiDropdown(config) 
            local element = self._radiantHubInstance:_createMultiDropdown(self, config)
            table.insert(self.elementConfigs, {type = "multidropdown", config = config})
            return element
        end
        function section:CreateColorPicker(config) 
            local element = self._radiantHubInstance:_createColorPicker(self, config)
            table.insert(self.elementConfigs, {type = "colorpicker", config = config})
            return element
        end
        function section:CreateButton(config) 
            local element = self._radiantHubInstance:_createButton(self, config)
            table.insert(self.elementConfigs, {type = "button", config = config})
            return element
        end
        
        table.insert(tab.sections, section)
        table.insert(tab.sectionOrder, section)
        print("[RadiantHub] Section created:", section.name)
        return section
    end
    
    table.insert(self.tabs, tab)
    self:_createTabButton(tab, #self.tabs - 1)
    
    -- Set as current tab and display immediately if it's the first tab
    if #self.tabs == 1 then
        self.currentTab = tab
        -- Force initial display after a brief delay to ensure everything is loaded
        spawn(function()
            wait(0.1)
            if self.contentArea then
                self:_updateTabDisplay(tab)
                self:_updateTabButtons(tab)
            end
        end)
    end
    
    print("[RadiantHub] Tab created:", tab.name)
    return tab
end

function RadiantHub:_updateTabDisplay(tab)
    if not self.contentArea then
        warn("[RadiantHub] Content area not initialized")
        return
    end
    -- Clear existing content
    for _, child in ipairs(self.contentArea:GetChildren()) do
        child:Destroy()
    end
    -- Only display sections if there are any
    if not tab.sectionOrder or #tab.sectionOrder == 0 then
        return
    end
    -- Separate sections into left and right (if you want to keep this logic, otherwise stack vertically)
    local leftSections = {}
    local rightSections = {}
    for i, section in ipairs(tab.sectionOrder) do
        if i % 2 == 1 then
            table.insert(leftSections, section)
        else
            table.insert(rightSections, section)
        end
    end
    -- Create left sections
    local leftY = 0
    for _, section in ipairs(leftSections) do
        if section.elementConfigs and #section.elementConfigs > 0 then
            local sectionFrame = self:_createSectionFrame(section, self.leftContent, leftY)
            leftY = leftY + sectionFrame.Size.Y.Offset + 10
        end
    end
    -- Create right sections
    local rightY = 0
    for _, section in ipairs(rightSections) do
        if section.elementConfigs and #section.elementConfigs > 0 then
            local sectionFrame = self:_createSectionFrame(section, self.rightContent, rightY)
            rightY = rightY + sectionFrame.Size.Y.Offset + 10
        end
    end
end

-- Element Creation Functions
function RadiantHub:_createToggle(section, config)
    config = config or {}
    
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Toggle") .. "Container"
    container.Size = UDim2.new(1, -20, 0, 30)
    container.BackgroundTransparency = 1
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -35, 1, 0)
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "Toggle"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 16
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = container
    
    local checkbox = Instance.new("TextButton")
    checkbox.Size = UDim2.new(0, 20, 0, 20)
    checkbox.Position = UDim2.new(1, -25, 0.5, -10)
    checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    checkbox.BorderSizePixel = 1
    checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
    checkbox.Text = ""
    checkbox.Parent = container
    
    local checkboxCorner = Instance.new("UICorner")
    checkboxCorner.CornerRadius = UDim.new(0, 3)
    checkboxCorner.Parent = checkbox
    
    -- Gradient for toggle
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    })
    gradient.Rotation = 45
    gradient.Parent = checkbox
    
    local checkmark = Instance.new("TextLabel")
    checkmark.Size = UDim2.new(1, 0, 1, 0)
    checkmark.BackgroundTransparency = 1
    checkmark.Text = "✓"
    checkmark.TextColor3 = Color3.fromRGB(0, 255, 100)
    checkmark.TextSize = 14
    checkmark.Font = Enum.Font.GothamBold
    checkmark.TextStrokeTransparency = 0
    checkmark.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    checkmark.Visible = config.Default or false
    checkmark.Parent = checkbox
    
    local isEnabled = config.Default or false
    if isEnabled then
        checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
        checkmark.Visible = true
        textLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
    end
    
    local function updateToggle()
        if isEnabled then
            checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            checkbox.BorderColor3 = Color3.fromRGB(0, 255, 100)
            checkmark.Visible = true
            textLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
        else
            checkbox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            checkbox.BorderColor3 = Color3.fromRGB(150, 150, 150)
            checkmark.Visible = false
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        end
    end
    
    checkbox.Activated:Connect(function()
        isEnabled = not isEnabled
        updateToggle()
        if config.Callback then
            config.Callback(isEnabled)
        end
    end)
    
    return {
        container = container,
        SetValue = function(value)
            isEnabled = not not value
            updateToggle()
            if config.Callback then
                config.Callback(isEnabled)
            end
        end,
        GetValue = function()
            return isEnabled
        end
    }
end

function RadiantHub:_createSlider(section, config)
    config = config or {}
    
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Slider") .. "Container"
    container.Size = UDim2.new(1, -20, 0, 40)
    container.BackgroundTransparency = 1

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0.6, 0, 0, 20)
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "Slider"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = container

    local minVal = tonumber(config.Min) or 0
    local maxVal = tonumber(config.Max) or 100
    local currentValue = tonumber(config.Default) or minVal

    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0.3, 0, 0, 20)
    valueLabel.Position = UDim2.new(0.7, 0, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(currentValue)
    valueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    valueLabel.TextSize = 12
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.TextStrokeTransparency = 0
    valueLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    valueLabel.Parent = container

    local sliderBG = Instance.new("TextButton")
    sliderBG.Size = UDim2.new(1, 0, 0, 8)
    sliderBG.Position = UDim2.new(0, 0, 1, -12)
    sliderBG.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    sliderBG.BorderSizePixel = 1
    sliderBG.BorderColor3 = Color3.fromRGB(50, 50, 50)
    sliderBG.Text = ""
    sliderBG.Parent = container
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 4)
    sliderCorner.Parent = sliderBG

    local initPos = (currentValue - minVal) / (maxVal - minVal)
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(initPos, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundTransparency = 0
    sliderFill.BackgroundColor3 = Color3.new(1, 1, 1)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBG
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 4)
    fillCorner.Parent = sliderFill

    -- Gradient for slider fill (black to red)
    local sliderGradient = Instance.new("UIGradient")
    sliderGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    sliderGradient.Rotation = 0
    sliderGradient.Parent = sliderFill

    local sliderHandle = Instance.new("TextButton")
    sliderHandle.Size = UDim2.new(0, 12, 0, 12)
    sliderHandle.Position = UDim2.new(initPos, -6, 0.5, -6)
    sliderHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderHandle.BorderSizePixel = 1
    sliderHandle.BorderColor3 = Color3.fromRGB(200, 200, 200)
    sliderHandle.Text = ""
    sliderHandle.Parent = sliderBG
    
    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(0.5, 0)
    handleCorner.Parent = sliderHandle

    local isDragging = false
    local function updateSlider(inputPos)
        local pos = math.clamp((inputPos.X - sliderBG.AbsolutePosition.X) / sliderBG.AbsoluteSize.X, 0, 1)
        local value = math.floor(minVal + (maxVal - minVal) * pos)
        currentValue = value
        sliderFill.Size = UDim2.new(pos, 0, 1, 0)
        sliderHandle.Position = UDim2.new(pos, -6, 0.5, -6)
        valueLabel.Text = tostring(value)
        if config.Callback then
            config.Callback(value)
        end
    end
    
    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            updateSlider(input.Position)
        end
    end)
    
    sliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            updateSlider(input.Position)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input.Position)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    return {
        container = container,
        SetValue = function(value)
            local numValue = tonumber(value)
            if numValue then
                currentValue = math.clamp(numValue, minVal, maxVal)
                local pos = (currentValue - minVal) / (maxVal - minVal)
                sliderFill.Size = UDim2.new(pos, 0, 1, 0)
                sliderHandle.Position = UDim2.new(pos, -6, 0.5, -6)
                valueLabel.Text = tostring(currentValue)
                if config.Callback then
                    config.Callback(currentValue)
                end
            end
        end,
        GetValue = function()
            return currentValue
        end
    }
end

function RadiantHub:_createDropdown(section, config)
    config = config or {}
    
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Dropdown") .. "Container"
    container.Size = UDim2.new(1, -20, 0, 35)
    container.BackgroundTransparency = 1
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0.4, 0, 1, 0)
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "Dropdown"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.Parent = container
    
    local currentIndex = config.Default or 1
    local options = config.Options or {"Option 1", "Option 2"}
    
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(0.55, 0, 0, 25)
    dropdown.Position = UDim2.new(0.45, 0, 0.5, -12.5)
    dropdown.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    dropdown.BorderSizePixel = 1
    dropdown.BorderColor3 = Color3.fromRGB(100, 100, 100)
    dropdown.Text = tostring(options[currentIndex]) .. " ▼"
    dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.TextStrokeTransparency = 0
    dropdown.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    dropdown.TextSize = 11
    dropdown.Font = Enum.Font.Gotham
    dropdown.ZIndex = 2
    dropdown.Parent = container
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 4)
    dropdownCorner.Parent = dropdown
    
    dropdown.MouseButton1Click:Connect(function()
        if config.Callback then
            config.Callback(options[currentIndex], currentIndex)
        end
    end)
    
    return {
        container = container,
        SetValue = function(value)
            local numValue = tonumber(value)
            if numValue and numValue >= 1 and numValue <= #options then
                currentIndex = numValue
                dropdown.Text = tostring(options[currentIndex]) .. " ▼"
                if config.Callback then
                    config.Callback(options[currentIndex], currentIndex)
                end
            end
        end,
        GetValue = function()
            return currentIndex, options[currentIndex]
        end
    }
end

function RadiantHub:_createMultiDropdown(section, config)
    return self:_createDropdown(section, config)
end

function RadiantHub:_createColorPicker(section, config)
    config = config or {}
    
    local container = Instance.new("Frame")
    container.Name = (config.Name or "ColorPicker") .. "Container"
    container.Size = UDim2.new(1, -20, 0, 30)
    container.BackgroundTransparency = 1

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -40, 1, 0)
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = config.Name or "ColorPicker"
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = container

    local colorButton = Instance.new("TextButton")
    colorButton.Size = UDim2.new(0, 25, 0, 22)
    colorButton.Position = UDim2.new(1, -30, 0.5, -11)
    colorButton.BackgroundColor3 = config.Default or Color3.fromRGB(255, 100, 100)
    colorButton.BorderSizePixel = 1
    colorButton.BorderColor3 = Color3.fromRGB(150, 150, 150)
    colorButton.Text = ""
    colorButton.ZIndex = 2
    colorButton.Parent = container

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = colorButton

    colorButton.MouseButton1Click:Connect(function()
        if config.Callback then
            config.Callback(colorButton.BackgroundColor3)
        end
    end)
    
    return {
        container = container,
        SetValue = function(value)
            if typeof(value) == "Color3" then
                colorButton.BackgroundColor3 = value
                if config.Callback then
                    config.Callback(value)
                end
            end
        end,
        GetValue = function()
            return colorButton.BackgroundColor3
        end
    }
end

function RadiantHub:_createButton(section, config)
    config = config or {}
    
    local container = Instance.new("Frame")
    container.Name = (config.Name or "Button") .. "Container"
    container.Size = UDim2.new(1, -20, 0, 35)
    container.BackgroundTransparency = 1
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, -5)
    button.Position = UDim2.new(0, 0, 0, 2.5)
    button.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    button.BorderSizePixel = 1
    button.BorderColor3 = Color3.fromRGB(150, 150, 150)
    button.Text = config.Name or "Button"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.GothamBold
    button.TextStrokeTransparency = 0
    button.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    button.Parent = container
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = button
    
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(255, 70, 67)
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    end)
    
    button.Activated:Connect(function()
        if config.Callback then
            pcall(config.Callback)
        end
    end)
    
    return {
        container = container,
        SetText = function(text)
            button.Text = tostring(text or "Button")
        end
    }
end

-- Notification System
function RadiantHub:CreateNotification(title, message, duration)
    if not self.notificationContainer then
        warn("RadiantHub: Notification container not initialized")
        return
    end
    
    title = tostring(title or "Notification")
    message = tostring(message or "")
    duration = duration or 3
    
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(1, 0, 0, 60)
    notification.Position = UDim2.new(1, 0, 1, -60 * (#self.notificationQueue + 1))
    notification.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    notification.BorderSizePixel = 0
    notification.Parent = self.notificationContainer
    
    table.insert(self.notificationQueue, notification)
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 6)
    notifCorner.Parent = notification
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -10, 0, 20)
    titleLabel.Position = UDim2.new(0, 8, 0, 8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 12
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -10, 0, 25)
    messageLabel.Position = UDim2.new(0, 8, 0, 28)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    messageLabel.TextSize = 10
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Parent = notification
    
    local slideIn = TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0, 0, 1, -60 * #self.notificationQueue)
    })
    slideIn:Play()
    
    spawn(function()
        wait(duration)
        for i, notif in ipairs(self.notificationQueue) do
            if notif == notification then
                table.remove(self.notificationQueue, i)
                break
            end
        end
        
        local slideOut = TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 0, notification.Position.Y.Scale, notification.Position.Y.Offset)
        })
        slideOut:Play()
        slideOut.Completed:Connect(function()
            notification:Destroy()
        end)
    end)
end

-- Setup Functions
function RadiantHub:_setupAnimations()
    -- Border gradient animation
    local function animateGradient()
        local tweenInfo = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1)
        local tween = TweenService:Create(self.borderGradient, tweenInfo, {Rotation = 405})
        tween:Play()
    end
    
    -- RGB text animation
    local function animateRGBText()
        local hue = 0
        RunService.Heartbeat:Connect(function()
            hue = (hue + 2) % 360
            local r = math.floor(127.5 * (1 + math.sin(math.rad(hue))))
            local g = math.floor(127.5 * (1 + math.sin(math.rad(hue + 120))))
            local b = math.floor(127.5 * (1 + math.sin(math.rad(hue + 240))))
            self.radiantLabel.TextColor3 = Color3.fromRGB(r, g, b)
        end)
    end
    
    -- FPS counter
    local function updateFPS()
        local lastTime = tick()
        local frameCount = 0
        
        RunService.Heartbeat:Connect(function()
            frameCount = frameCount + 1
            local currentTime = tick()
            if currentTime - lastTime >= 1 then
                local fps = math.floor(frameCount / (currentTime - lastTime))
                self.fpsLabel.Text = fps .. " FPS"
                frameCount = 0
                lastTime = currentTime
            end
        end)
    end
    
    animateGradient()
    animateRGBText()
    updateFPS()
end

function RadiantHub:_setupControls()
    -- Minimize/Restore functionality
    local function minimizeUI()
        self.isMinimized = true
        self.mainFrame.Visible = false
        self.minimizedIcon.Visible = true
    end

    local function restoreUI()
        self.isMinimized = false
        self.mainFrame.Visible = true
        self.minimizedIcon.Visible = false
    end

    self.minimizeButton.Activated:Connect(minimizeUI)
    self.minimizedIcon.Activated:Connect(restoreUI)

    -- Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil

    self.titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = self.mainFrame.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                         input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            self.mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    -- Close button
    self.closeButton.Activated:Connect(function()
        self:Destroy()
    end)

    -- Keyboard shortcut (Right Ctrl to toggle)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
            if self.isMinimized then
                restoreUI()
            else
                minimizeUI()
            end
        end
    end)
end

function RadiantHub:_createTabButton(tab, index)
    if not self.leftSidebar then
        warn("RadiantHub: Left sidebar not initialized")
        return
    end
    
    local container = Instance.new("Frame")
    container.Name = tab.name .. "Container"
    container.Size = UDim2.new(1, 0, 0, 45)
    container.Position = UDim2.new(0, -10, 0, 15 + (index * 45))
    container.BackgroundTransparency = 1
    container.Parent = self.leftSidebar
    
    local indicator = Instance.new("Frame")
    indicator.Name = "Indicator"
    indicator.Size = UDim2.new(0, 3, 0, 25)
    indicator.Position = UDim2.new(0, 10, 0.5, -12.5)
    indicator.BackgroundColor3 = Color3.fromRGB(220, 50, 47)
    indicator.BorderSizePixel = 0
    indicator.Visible = index == 0
    indicator.Parent = container
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 2)
    indicatorCorner.Parent = indicator
    
    local button = Instance.new("TextButton")
    button.Name = tab.name .. "Tab"
    button.Size = UDim2.new(1, -10, 1, 0)
    button.Position = UDim2.new(0, 10, 0, 0)
    button.BackgroundTransparency = 1
    button.BorderSizePixel = 0
    button.Text = ""
    button.Parent = container
    
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Name = "Icon"
    iconLabel.Size = UDim2.new(0, 16, 0, 16)
    iconLabel.Position = UDim2.new(0, 12, 0.5, -8)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = tab.icon
    iconLabel.TextColor3 = index == 0 and Color3.fromRGB(220, 50, 47) or Color3.fromRGB(160, 160, 160)
    iconLabel.TextSize = 14
    iconLabel.Font = Enum.Font.Gotham
    iconLabel.TextXAlignment = Enum.TextXAlignment.Center
    iconLabel.TextYAlignment = Enum.TextYAlignment.Center
    iconLabel.Parent = button
    
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(0, 1, 0, 16)
    separator.Position = UDim2.new(0, 34, 0.5, -8)
    separator.BackgroundColor3 = index == 0 and Color3.fromRGB(220, 50, 47) or Color3.fromRGB(80, 80, 80)
    separator.BorderSizePixel = 0
    separator.Parent = button
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.Size = UDim2.new(1, -45, 1, 0)
    textLabel.Position = UDim2.new(0, 40, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = tab.name
    textLabel.TextColor3 = index == 0 and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(160, 160, 160)
    textLabel.TextSize = 15
    textLabel.Font = Enum.Font.GothamSemibold
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.Parent = button
    
    button.Activated:Connect(function()
        self.currentTab = tab
        self:_updateTabDisplay(tab)
        self:_updateTabButtons(tab)
    end)
end

-- Utility Functions
function RadiantHub:GetSetting(name)
    return self.settings[name]
end

function RadiantHub:SetSetting(name, value)
    self.settings[name] = value
end

function RadiantHub:DebugSettings()
    print("=== RadiantHub Settings Debug ===")
    for name, value in pairs(self.settings) do
        print(tostring(name) .. " = " .. tostring(value) .. " (type: " .. type(value) .. ")")
    end
    print("=== End Debug ===")
end

function RadiantHub:Destroy()
    if self.screenGui then
        self.screenGui:Destroy()
    end
    if self.watermarkGui then
        self.watermarkGui:Destroy()
    end
end

return RadiantHub
