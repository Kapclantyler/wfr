local Workspace = game:FindService("Workspace");
local CurrentCamera = workspace.CurrentCamera;
local RunService = game:FindService("RunService");

function create(className, properties)
	local inst = Instance.new(className);
	table.foreach(properties or {}, function(i, v)
		inst[i] = v;
	end);
	return inst
end;

function GetBoundingBox(model, camera)
	local minBound, maxBound;
	local parts = model:GetDescendants();
	table.foreach(parts, function(_, part)
		if part:IsA("BasePart") and part.Transparency == 0 then
			local cf = part.CFrame;
			local sx, sy, sz = part.Size.X / 2, part.Size.Y / 2, part.Size.Z / 2;
			for x = -1, 1, 2 do for y = -1, 1, 2 do for z = -1, 1, 2 do
						local world = cf:PointToWorldSpace(Vector3.new(x * sx, y * sy, z * sz));
						if not minBound then
							minBound = world;
							maxBound = world;
						else
							minBound = Vector3.new(math.min(minBound.X, world.X),math.min(minBound.Y, world.Y),math.min(minBound.Z, world.Z));
							maxBound = Vector3.new(math.max(maxBound.X, world.X),math.max(maxBound.Y, world.Y),math.max(maxBound.Z, world.Z));
						end;
					end;
				end;
			end;
		end;
	end);
	if minBound and maxBound then
		camera = camera or workspace.CurrentCamera;
		local centerWorld = (minBound + maxBound) / 2;
		local sizeWorld = maxBound - minBound;
		local camCF = camera.CFrame;
		local camLookVector = camCF.LookVector;
		local camRightVector = camCF.RightVector;
		local camUpVector = camCF.UpVector;
		local minX, maxX = math.huge, -math.huge;
		local minY, maxY = math.huge, -math.huge;
		local minZ, maxZ = math.huge, -math.huge;
		for x = -1, 1, 2 do 
			for y = -1, 1, 2 do 
				for z = -1, 1, 2 do
					local cornerWorld = Vector3.new(
						centerWorld.X + x * sizeWorld.X / 2,
						centerWorld.Y + y * sizeWorld.Y / 2,
						centerWorld.Z + z * sizeWorld.Z / 2
					);
					local relativePos = cornerWorld - camCF.Position;
					local projRight = relativePos:Dot(camRightVector);
					local projUp = relativePos:Dot(camUpVector);
					local projLook = relativePos:Dot(camLookVector);
					minX = math.min(minX, projRight);
					maxX = math.max(maxX, projRight);
					minY = math.min(minY, projUp);
					maxY = math.max(maxY, projUp);
					minZ = math.min(minZ, projLook);
					maxZ = math.max(maxZ, projLook);
				end;
			end;
		end;
		local width = maxX - minX;
		local height = maxY - minY;
		local depth = maxZ - minZ;
		local centerOffset = camRightVector * ((minX + maxX) / 2) + 
			camUpVector * ((minY + maxY) / 2) + 
			camLookVector * ((minZ + maxZ) / 2);
		local centerCam = camCF.Position + centerOffset;
		local lookAt = CFrame.lookAt(centerCam, camCF.Position);
		return lookAt, Vector3.new(
			math.min(width, 5),
			math.min(height, 6.7),
			math.min(depth, 5)
		);
	end;
	return nil, nil;
end;
function getColorFromGradient(Num)
	local color1, color2, color3, color4 = Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 255, 0), Color3.fromRGB(0, 255, 0)

	if Num <= 0 then
		return color1
	elseif Num <= 0.4 then
		return color1:Lerp(color2, Num / 0.4)
	elseif Num <= 0.65 then
		return color2:Lerp(color3, (Num - 0.4) / 0.25)
	else
		return color3:Lerp(color4, (Num - 0.65) / 0.35)
	end
end
local Hasesp,Settings,Namedb = {},{
	Box = false,
	Name = false,
	Weapon = false,
	Enabled = false,
	Distance = false,
	HealthBar = false,
},{}
return {function(Player)
	Hasesp[Player] = {}
	if not Player.Character then return end
	local con1,con2,hue = nil,nil,math.random(1,300);
	local Part = create("Part", {Size = Vector3.zero,Parent = workspace.Terrain,Anchored = true,Transparency = 1, CanCollide = false}) :: Part;
	local Gui = create("BillboardGui", {Parent = Part,AlwaysOnTop = true,ClipsDescendants = false}) :: BillboardGui;
	local Box = create("Frame",{ Parent = Gui,AnchorPoint = Vector2.new(0.5, 0.5),Position = UDim2.new(0.5, 0, 0.5, 0),BackgroundTransparency = 1}):: Frame;
	local Top = create("Frame", {Parent = Box, ZIndex = 10;BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(0.5, 0);Size = UDim2.new(1, 0, 0, 1);Position = UDim2.new(0.5, 0, 0, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);Name = [[Top]];LayoutOrder = 10;}):: Frame;
	create("Frame" ,{Parent = Top ,BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(0, 0, 0);AnchorPoint = Vector2.new(0.5, 0.5);Size = UDim2.new(1, 0, 1, 2);Position = UDim2.new(0.5, 0, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);});
	local Bottom = create("Frame", {Parent = Box,ZIndex = 10;BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(0.5, 1);Size = UDim2.new(1, 0, 0, 1);Position = UDim2.new(0.5, 0, 1, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);Name = [[Bottom]];LayoutOrder = 10;}):: Frame;
	create("Frame", {Parent = Bottom,BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(0, 0, 0);AnchorPoint = Vector2.new(0.5, 0.5);Size = UDim2.new(1, 0, 1, 2);Position = UDim2.new(0.5, 0, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);});
	local Left = create("Frame", {Parent = Box , ZIndex = 10;BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(0, 0.5);Size = UDim2.new(0, 1, 1, 0);Position = UDim2.new(0, 0, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);Name = [[Left]];LayoutOrder = 10;}):: Frame;
	create("Frame", {Parent = Left,BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(0, 0, 0);AnchorPoint = Vector2.new(0.5, 0.5);Size = UDim2.new(1, 2, 1, 0);Position = UDim2.new(0.5, 0, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0); });
	local Right = create("Frame", {Parent = Box , ZIndex = 10;BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(1, 0.5);Size = UDim2.new(0, 1, 1, 0);Position = UDim2.new(1, 0, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);Name = [[Right]];LayoutOrder = 10;}):: Frame;
	create("Frame", {Parent = Right,BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(0, 0, 0);AnchorPoint = Vector2.new(0.5, 0.5);Size = UDim2.new(1, 2, 1, 0);Position = UDim2.new(0.5, 0, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0); });
	local Name = create("TextLabel", {Parent = Gui, TextStrokeTransparency = 0;BorderSizePixel = 0;TextSize = 12;TextYAlignment = Enum.TextYAlignment.Bottom;BackgroundColor3 = Color3.fromRGB(255, 255, 255);FontFace = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);TextColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(0.5, 0.5);BorderColor3 = Color3.fromRGB(0, 0, 0);Text = [[Name]];Name = [[Name]];Position = UDim2.new(0.5, 0, 0.499, -1);}):: TextLabel;
	local Weapon = create("TextLabel", {Parent = Gui, TextStrokeTransparency = 0;BorderSizePixel = 0;TextSize = 12;TextYAlignment = Enum.TextYAlignment.Top;BackgroundColor3 = Color3.fromRGB(255, 255, 255);FontFace = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);TextColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(0.5, 1);BorderColor3 = Color3.fromRGB(0, 0, 0);Text = [[Wep]];Name = [[Weapon]];Position = UDim2.new(0.5, 0, 0.501, 1);}):: TextLabel;
	local Distance = create("TextLabel", {Parent = Gui,TextStrokeTransparency = 0;BorderSizePixel = 0;TextSize = 12;TextYAlignment = Enum.TextYAlignment.Top;BackgroundColor3 = Color3.fromRGB(255, 255, 255);FontFace = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);TextColor3 = Color3.fromRGB(255, 255, 255);AnchorPoint = Vector2.new(0.5, 1);BorderColor3 = Color3.fromRGB(0, 0, 0);Text = [[42079]];Name = [[Dis]];Position = UDim2.new(0.5, 0, 0.501, 13);}):: TextLabel;
	local HealthBar = create("Frame", {Parent = Gui , BackgroundColor3 = Color3.fromRGB(17, 17, 17);AnchorPoint = Vector2.new(1, 0.5);Size = UDim2.new(0, 1, 0.002, 0);Position = UDim2.new(0.49895, -1, 0.5, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);Name = [[Health]];BackgroundTransparency = 0.5;}):: Frame;
	create("Frame", {Parent = HealthBar, BorderSizePixel = 0;BackgroundColor3 = Color3.fromRGB(7, 255, 0);AnchorPoint = Vector2.new(0.5, 1);Size = UDim2.new(1, 0, 1, 0);Position = UDim2.new(0.5, 0, 1, 0);BorderColor3 = Color3.fromRGB(0, 0, 0);Name = [[bar]];});
    con1 = RunService.Stepped:Connect(function()	
		local Cf, Size = GetBoundingBox(Player.Character);
		local _, on = CurrentCamera:WorldToViewportPoint(Cf.Position)
		hue = hue + 1
		if hue > 300 then hue = 0 end
		if on and Settings.Enabled then
			local color = Color3.fromHSV(hue/300, 1, 1);
			Part.Position = Cf.Position;
			Gui.Enabled = true;
			Gui.Size = UDim2.fromScale((Size.X + 1) * 500,(Size.Y + 1) * 500)
			
			if Settings.Name then
				Name.Visible = true
				Name.Text = Player.Name
			else
				Name.Visible = false
			end
			if Settings.Box then
				Box.Visible = true;
				Box.Size = UDim2.fromScale(1/500,1/500)
			else
				Box.Visible = false
			end;
			
			if Settings.Weapon then
				Weapon.Visible = true
				Weapon.Text = Player.Character:FindFirstChildOfClass("Tool") and Player.Character:FindFirstChildOfClass("Tool").Name or "None"
			else
				Weapon.Visible = false
			end
			if Settings.Distance then
				Distance.Visible = true
				 
				local pos = 1
				if Weapon.Visible then
					pos = pos + Weapon.TextBounds.Y + 1
				end
				Distance.Text = "[" .. tostring(math.floor(Player:DistanceFromCharacter(CurrentCamera.CFrame.Position))) .. "]s"
				Distance.Position = UDim2.new(0.5, 0, 0.501, pos)
			else
				Distance.Visible = false
			end
			if Settings.HealthBar then
				local num = Player.Character.Humanoid.Health / Player.Character.Humanoid.MaxHealth
				HealthBar.bar.Size = UDim2.new(1,0,num,0)
				HealthBar.bar.BackgroundColor3 = getColorFromGradient(num)
				HealthBar.Visible = true
			else
				HealthBar.Visble = false
			end
			
			
		else
			Gui.Enabled = false;
		end;
	end);

	con2 = Player.Character.AncestryChanged:Connect(function(_,Parent)
		if Parent == nil then
			con1:Disconnect();


			Part:Destroy();
			con2:Disconnect();
		end;
	end);


end,Hasesp,Settings}
